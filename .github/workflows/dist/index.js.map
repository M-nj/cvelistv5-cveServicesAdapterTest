{"version":3,"file":"index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCA;;;;;;;AAOA;AAEA;;;AAGA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC1JA;;;;;;;;;;;;;;;;;;;AAmBA;AAQA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACzIA;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAEA;;;;;;;AAOA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;;;;AC1GA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvDA;;;;;AAKA;AAEA;AACA;AACA;AAGA;AAAA;AAUA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;AAIA;AACA;AACA;AACA;AAGA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvMA;;;;AAIA;AAEA;AAMA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;ACvGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;AAEA;AAGA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;ACzHA;AAEA;AAGA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AC3IA;;;;;;;;;;AAUA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACxMA;;;;;;AAMA;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AAEA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AC1HA;;;;;;;AAOA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AASA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AAEA;;;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC1RA;;;;;;;;;;;AAWA;AAEA;AAOA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;;;;ACjSA;;;;;AAKA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAGA;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAGA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;AASA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;ACvHA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AChEA;;AAEA;AAEA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;;;AAGA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;ACzEA;;;AAGA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;;;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;AAKA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC9DA;AAkBA;;AAEA;AACA;AAEA;;;;;;;;AAQA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;ACtDA;;;;AAIA;AAEA;AACA;AACA;AAiBA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;AAUA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;AAGA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;ACxSA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AAEA;AACA;AAEA;;;;AAIA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;AClGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAKA;AAIA;AAIA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;ACpEA;;;;AAIA;AAEA;AACA;AAaA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAIA;;AAEA;AACA;AACA;AACA;AAGA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AClHA;;;AAGA;AACA;AACA;AAEA;AAaA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAmCA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AC1GA;;AAEA;AAEA;AAMA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;AAoBA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;AAQA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;ACxMA;;;;;;;;;;;;;;AAcA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AC7NA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC/BA;;;;AAIA;AACA;AACA;AACA;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;ACvBA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AC9BA;AAEA;AACA;AACA;AAaA;AACA;AAEA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7LA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAIA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACzJA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;AC7BA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA","sources":["../webpack://cve-utils/webpack/bootstrap","../webpack://cve-utils/./src/common/IsoDate/IsoDateString.ts","../webpack://cve-utils/./src/core/CveDate.ts","../webpack://cve-utils/./src/commands/GenericCommand.ts","../webpack://cve-utils/./src/commands/DateCommand.ts","../webpack://cve-utils/./src/core/CveId.ts","../webpack://cve-utils/./src/core/CveCore.ts","../webpack://cve-utils/./src/core/CveSignature.ts","../webpack://cve-utils/./src/core/fsUtils.ts","../webpack://cve-utils/./src/core/CveRecord.ts","../webpack://cve-utils/./src/core/CveCorePlus.ts","../webpack://cve-utils/./src/core/Delta.ts","../webpack://cve-utils/./src/core/git.ts","../webpack://cve-utils/./src/core/DeltaFs.ts","../webpack://cve-utils/./src/commands/DeltaCommand.ts","../webpack://cve-utils/./src/adapters/fs/FsReader.ts","../webpack://cve-utils/./src/adapters/fs/CveFsReader.ts","../webpack://cve-utils/./src/core/CveListDir.ts","../webpack://cve-utils/./src/core/CveSignatureListing.ts","../webpack://cve-utils/./src/commands/list/ListManager.ts","../webpack://cve-utils/./src/commands/list/ListCommand.ts","../webpack://cve-utils/./src/core/ActivityLog.ts","../webpack://cve-utils/./src/core/Activity.ts","../webpack://cve-utils/./src/commands/updateCvesDir/CveUpdater.ts","../webpack://cve-utils/./src/core/DeltaLog.ts","../webpack://cve-utils/./src/adapters/cveservice/CveServiceCredSet.ts","../webpack://cve-utils/./src/adapters/cveservice/CveService.ts","../webpack://cve-utils/./src/adapters/cveservice/CveServiceBaseUrl.ts","../webpack://cve-utils/./src/adapters/cveservice/CveServiceCveReader.ts","../webpack://cve-utils/./src/commands/updateCvesDir/UpdateCommand.ts","../webpack://cve-utils/./src/commands/MainCommands.ts","../webpack://cve-utils/./src/main.ts"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/** Class representing a strongly opinionated ISO Date+Time+TZ string with utils\r\n *  Note that this class was written to be very opinionated. See IsoDateString.test.ts for properly formatted\r\n *    and improperly formatted strings.  In general, the output of Date.toISOString() is\r\n *    the preferred format, with some exceptions as noted in IsoDateString.test.ts\r\n *\r\n *  Note that in the future, if necessary, we can extend what this class covers, but for now\r\n *    this strict and opinionated set is very useful for processing ISO Date+Time+TZ strings\r\n */\r\n\r\n/** a regular expression to represent an ISO Date+Time+TZ string\r\n *  taken from https://stackoverflow.com/a/3143231/1274852\r\n *  works for cases used in CVE representations\r\n */\r\n// import add from 'date-fns/add/index.js';\r\nexport const IsoDateStringRegEx =\r\n  /(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))/;\r\nexport const GregorianLeapDateRegEx = /\\d{4}-02-29/; // allows for any 4 digit year\r\n\r\nexport class IsoDateString {\r\n\r\n  static _minute = 60 * 1000;\r\n  static _hour = 60 * 60 * 1000;\r\n  static _day = 60 * 60 * 24 * 1000;\r\n\r\n  _isoDateString: string = '';\r\n  _date: Date;\r\n\r\n  /** returns a IsoDateString object iff isoDateStr is a properly formatted ISO Date+Time+TZ string,\r\n   *  or if a string is not specified, then this will create a IsoDateString of \"now\" using new Date()\r\n   *  Note that the constructor will always create a new IsoDateString containing a valid value, or it will throw an exception\r\n   *  @param isoDateStr a properly formatted ISO Date+Time+TZ string (defaults to now)\r\n   *  @param assumeZ set to true if want to assume a trailing Z for GMT/Zulu time zone (default is false)\r\n   *                 this is needed because CVEs timestamps may be missing the timezone, and we are assuming it to be GMT\r\n   */\r\n  constructor(isoDateStr: string = null, assumeZ = false) {\r\n    if (!isoDateStr) {\r\n      isoDateStr = new Date().toISOString();\r\n    }\r\n    if (isoDateStr[isoDateStr.length - 1] !== 'Z' && assumeZ) {\r\n      isoDateStr = `${isoDateStr}Z`;\r\n    }\r\n    if (IsoDateString.isIsoDateString(isoDateStr)) {\r\n      this._isoDateString = isoDateStr;\r\n      this._date = new Date(Date.parse(this._isoDateString));\r\n    } else {\r\n      throw new TypeError(`Invalid ISO Date string:  ${isoDateStr}`);\r\n    }\r\n\r\n    if ((GregorianLeapDateRegEx).test(isoDateStr)) {\r\n      let yr = parseInt(isoDateStr.substr(0, 4));\r\n      // leap year: the year number must be divisible by four – except for end-of-century years, which must be divisible by 400.\r\n      if (yr % 4 != 0 || (yr % 100 == 0 ? yr % 400 != 0 : false)) {\r\n        // We raise an error on non gregorian leap year here rather than allow ourselves to mimic the Date's default behavior to ensure sanity.\r\n        throw TypeError(`Invalid leap date! Please convert to proper date and try again!`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * builds an IsoDateString using a Javascript Date object\r\n   * @param date a JavaScript Date object\r\n   * @returns an IsoDateString\r\n   */\r\n  static fromDate(date: Date): IsoDateString {\r\n    return new IsoDateString(date.toISOString());\r\n  }\r\n\r\n  /**\r\n   * builds an IsoDateString using the number of seconds since 1/1/1970\r\n   * @param secsSince1970 number representing seconds since 1/1/1970\r\n   * @returns an IsoDateString\r\n   */\r\n  static fromNumber(secsSince1970: number): IsoDateString {\r\n    return IsoDateString.fromDate(new Date(secsSince1970));\r\n  }\r\n\r\n  static fromIsoDateString(isoDateStr: IsoDateString): IsoDateString {\r\n    const iso = new IsoDateString(isoDateStr.toString());\r\n    return iso;\r\n  }\r\n\r\n  /** returns the number of characters in the string representation */\r\n  length(): number {\r\n    return this._isoDateString.length;\r\n  }\r\n\r\n  /** returns the string representation */\r\n  toString(): string {\r\n    return this._isoDateString;\r\n  }\r\n\r\n\r\n  /**\r\n   * @returns a number representing the number of millisecs since 1970-01-01T00:00:00.000Z\r\n   */\r\n  toNumber(): number {\r\n    return this._date.getTime();\r\n  }\r\n\r\n\r\n  /** properly outputs the object in JSON.stringify() */\r\n  toJSON(): string {\r\n    return this.toString();\r\n  }\r\n\r\n  /** returns a JS Date object from the string representation */\r\n  toDate(): Date {\r\n    return this._date;\r\n  }\r\n\r\n  // ----- static ----- ----- -----\r\n\r\n  /** strict testing of a string for being a valid ISO Date+Time+TZ string  */\r\n  static isIsoDateString(str: string): boolean {\r\n    return IsoDateStringRegEx.test(str);\r\n  }\r\n\r\n  /**\r\n   * return a new IsoDateString that is minutes ago or since\r\n   * @param minutes positive number to minutes ago, negative number for minutes since\r\n   * @returns a new IsoDateString that is specified minutes ago or since\r\n   */\r\n  minutesAgo(minutes: number | string): IsoDateString {\r\n    if (typeof minutes === 'string') {\r\n      minutes = parseInt(minutes);\r\n    }\r\n    const timeStamp = new Date(this.toNumber() - (minutes * IsoDateString._minute));\r\n    return new IsoDateString(timeStamp.toISOString());\r\n  }\r\n\r\n  /**\r\n   * return a new IsoDateString that is hours ago or since\r\n   * @param hours positive number to hours ago, negative number for hours since\r\n   * @returns a new IsoDateString that is specified hours ago or since\r\n   */\r\n  hoursAgo(hours: number | string): IsoDateString {\r\n    if (typeof hours === 'string') {\r\n      hours = parseInt(hours);\r\n    }\r\n    const timeStamp = new Date(this.toNumber() - (hours * IsoDateString._hour));\r\n    return new IsoDateString(timeStamp.toISOString());\r\n  }\r\n\r\n  /**\r\n   * return a new IsoDateString that is days ago or since\r\n   * @param days positive number to days ago, negative number for days since\r\n   * @returns a new IsoDateString that is specified days ago or since\r\n   */\r\n  daysAgo(days: number | string): IsoDateString {\r\n    if (typeof days === 'string') {\r\n      days = parseInt(days);\r\n    }\r\n    const timeStamp = new Date(this.toNumber() - (days * IsoDateString._day));\r\n    return new IsoDateString(timeStamp.toISOString());\r\n  }\r\n}","/**\n *  Date utility and class to \n *    - facilitate using dates in CveRecords and Javascript, standardizing all dates to \n *      ISO format:  2023-03-29T00:00:00.000Z\n *    - provide timer functions inside instances \n * \n *  This is necessary because the Javascript Date object, while tracking UTC time \n *  internally (that is, the number of milliseconds since 1970-01-01T00:00:00.000Z)\n *  does not provide many functions to work with that time zone, choosing local time zone\n *  in most cases.  The exceptions are new Date(\"<UTC timestamp>\") and toISOString().\n * \n *  This class provides additional functions to meet the needs of this project.\n * \n *  In most cases in this project, since we deal with ISO dates almost exclusively, \n *  we are moving to common/IsoDateString.\n * \n *  Throughout this class, we will use\n *    - jsDate to represent a standard JS Date object\n *    - isoDateStr to represent an ISO/UTC/Z date string (e.g. 2023-03-29T00:00:00.000Z)\n */\n\n\nimport {\n  differenceInSeconds,\n  // endOfYesterday,\n  // startOfToday,\n  // startOfYesterday,\n  sub\n} from 'date-fns';\nimport { formatInTimeZone } from 'date-fns-tz';\nimport { IsoDateString } from '../common/IsoDate/IsoDateString.js';\n\nexport class CveDate {\n\n  /** the Date object this CveDate instance wraps */\n  private _jsDate: Date;\n\n  /** the constructor only creates a new CveDate based on an ISO date string \n   *  @param isoDateStr a string represenation of a date in ISO/UTC/Z format\n   *                    defaults to \"now\"\n  */\n  constructor(isoDateStr?: IsoDateString | string) {\n    let isoDate: IsoDateString;\n    if (isoDateStr instanceof IsoDateString) {\n      isoDate = isoDateStr;\n    }\n    else {  // isoDateStr is a string\n      isoDate = new IsoDateString(isoDateStr);\n    }\n    this._jsDate = new Date(isoDate.toString());\n  }\n\n  /** returns this as an ISO/UTC/Z date string */\n  asIsoDateString(): IsoDateString {\n    return new IsoDateString(CveDate.toISOString(this.asDate()));\n  }\n\n  /** returns a ISO/UTC formatted string in specified locale and time zone */\n  asDateString(timeZone: string = \"America/New_York\"): string {\n    return formatInTimeZone(this.asDate(), timeZone, \"yyyy-MM-dd pp zzzz\");\n  }\n\n  /** returns as a JS Date object */\n  asDate(): Date {\n    return this._jsDate\n  }\n\n  /** returns JS Date.toISOString() */\n  toString(): string {\n    return CveDate.toISOString(this.asDate());\n  }\n\n  // ----- static class utilities ----- ----- ----- ----- -----\n\n  /**\n   * @param jsDate a JS Date object, defaults to current timestamp\n   * @returns the current date in ISO string format (i.e., JS Date's toISOString() format)\n   */\n  static toISOString(jsDate: Date = null): string {\n    const time = jsDate ? jsDate : new Date();\n    return time.toISOString();\n  }\n\n  /**\n   * gets several date and time portions of a Date object as a tuple, defaults to current timestamp\n   * @param jsDate a JS Date object, defaults to current timestamp\n   * @returns a tuple of strings representing the components of jsDate\n   *  [0] - the date (e.g. \"2023-03-29\")\n   *  [1] - the time (e.g., \"19:05:55.559Z\")\n   *  [2] - the hour (e.g., \"19\")\n   */\n  static getDateComponents(jsDate?: Date): string[] {\n    const isoStr = (jsDate) ? jsDate.toISOString() : new Date().toISOString()\n    return [\n      isoStr.substring(0, isoStr.indexOf('T')), // [0] see comment above\n      isoStr.substring(isoStr.indexOf('T') + 1), // [1] see comment above\n      isoStr.substring(isoStr.indexOf('T') + 1, isoStr.indexOf(':')), // [2] see comment above\n    ];\n  }\n\n  /**\n   * returns today's midnight (i.e., today's date with hours all set to 0)\n   * @returns today's midnight as a Javascript Date object\n   */\n  static getMidnight(): Date {\n    const midnight = new Date();\n    midnight.setUTCHours(0, 0, 0, 0);\n    return midnight;\n  }\n\n  /**\n   * returns yesterday's midnight (i.e., yesterday's date with hours all set to 0)\n   * @returns yesterday's midnight as a Javascript Date object\n   */\n  static getMidnightYesterday(): Date {\n    const midnight = CveDate.getMidnight();\n    const midnightYesterday = sub(midnight, { hours: 24 });\n    return midnightYesterday;\n  }\n\n  /**\n   * returns yesterday's date as a string\n   * @returns yesterday's date as a string\n   */\n  static getYesterday(): string {\n    const midnightYesterday = CveDate.getMidnightYesterday();\n    return CveDate.getDateComponents(midnightYesterday)[0];\n  }\n\n  /**\n   * returns yesterday's midnight (i.e., yesterday's date with hours all set to 0)\n   * @returns yesterday's midnight as a Javascript Date object\n   */\n  static getSecondsAfterMidnight(): number {\n    const now = new CveDate();\n    const midnight = CveDate.getMidnight();\n    return differenceInSeconds(now.asDate(), midnight);\n  }\n}","import { Command } from 'commander';\nimport { CveDate } from '../core/CveDate.js';\n\n// read in package.json\nimport * as packageJson from '../../package.json'\n\n/**\n * Abstract base class for common functionality to all other XXXCommand classes\n */\nexport abstract class GenericCommand {\n\n  /** command name */\n  _name: string;\n\n  /** the Command object from the commander library */\n  _program: Command;\n\n\n  /** ----- cveUtils version string ----- ----- */\n\n  /** The version string is taken from the version string in package.json to promote a consistent\n   *  location for setting cveUtils metadata.  It is purposely set in \"code\" instead of in `.env`\n   *  because it should be \"baked in\" to the code instead of potentially changeable at runtime.  \n   *  This way, if there is a problem in CVEProject/cvelistV5, the output in github actions will\n   *  reflect the actual version of this app, and it will\n   *  simplify figuring out what the exact code looked like based on the tag.\n   * \n   */\n  static __utilVersionString: string = `${packageJson.default.version}`;\n\n  static getUtilityVersion(): string {\n    return this.__utilVersionString;\n  }\n\n  private static setUtilityVersion(versionString: string): string {\n    this.__utilVersionString = versionString;\n    return this.getUtilityVersion();\n  }\n\n\n  // ----- constructor ----- -----\n\n\n  /** constructor\n   * @param name the command name\n   * @param program the Command object (from main.ts)\n   */\n  constructor(name: string, program: Command) {\n    this._name = name;\n    this._program = program;\n    this.timerReset();\n  }\n\n\n  // ----- timer functions ----- -----\n\n  //  @todo move to utils/timer.ts\n  _startTimestamp: number;\n\n  /** resets the command timer */\n  timerReset(): number {\n    this._startTimestamp = Date.now();\n    return this._startTimestamp;\n  }\n\n  /** returns the number of seconds since timerReset() */\n  timerSinceStart(): number {\n    const currentTime = Date.now();\n    return Math.abs(currentTime - this._startTimestamp);\n  }\n\n  // ----- standardized prerun, postrun, and run functions ----- -----\n\n  /** common functions to run before run()\n   *  All subclasses should call this first in the overridden run() function\n  */\n  prerun(options): void {\n    const now = new CveDate();\n    if (options.preamble !== false && options.terse !== true) {\n      console.log(`CVE Utils version ${GenericCommand.getUtilityVersion()}`);\n      console.log(`  starting '${this._name}' command...`);\n    }\n    if (options.terse !== true) {\n      console.log(`  local  : ${now.asDateString((options.localTimezone) ? options.localTimezone : \"America/New_York\")}`);\n      console.log(`  ISO    : ${now.asIsoDateString()}`);\n    }\n\n    if (options.preamble !== false && options.terse !== true) {\n      console.log(`environment variables:\n        CVES_BASE_DIRECTORY: ${process.env.CVES_BASE_DIRECTORY}\n        CVE_SERVICES_URL: ${process.env.CVE_SERVICES_URL}`);\n      console.log(`${this._name} command options:  `);\n      console.log(`${JSON.stringify(options, null, 2)}`);\n    }\n  }\n\n  /** common functions to run after run()\n   *  All subclasses should call this last in the overridden run() function\n  */\n  postrun(options) {\n    if (options.logCurrentActivity) {\n      console.log(`activities file in ${process.env.CVES_BASE_DIRECTORY} `);\n    }\n  }\n\n  /** this is the method that performs the work for a specific command in the subclass\n   *  All subclasses should override this\n   */\n  async run(options: any) { };\n}\n","import { Command } from 'commander';\n\nimport { GenericCommand } from './GenericCommand.js';\nimport { CveDate } from '../core/CveDate.js';\n\n/** Command to print out current date in various formats */\nexport class DateCommand extends GenericCommand {\n  constructor(program: Command) {\n    const name = 'date';\n    super(name, program);\n    this._program\n      .command(name)\n      .description('current date')\n      .option(\n        '--local-timezone <IANA timezone>',\n        'show current time in timezone',\n        'America/New_York',\n      )\n      .option(\n        '--after-midnight-by-at-most-secs <secs>',\n        'return true iff current time is after midnight (ISO date) by at most specified secs',\n        '18000',\n      )\n      .option('--midnight', 'show midnight of today (ISO date)')\n      .option('--midnight-yesterday', 'show midnight of yesterday (ISO date)')\n      .option('--yesterday', \"show yesterday's date (ISO date)\")\n      .option('--terse', 'show only result, useful for bash scripts')\n      .action(this.run);\n  }\n\n  async run(options) {\n    super.prerun({ preamble: false, ...options });\n    if (options.midnight) {\n      const tag = options.terse ? '' : `  midnight:  `;\n      console.log(`${tag}${CveDate.toISOString(CveDate.getMidnight())}`);\n    } else if (options.midnightYesterday) {\n      const tag = options.terse ? '' : `  midnightYesterday:  `;\n      console.log(\n        `${tag}${CveDate.toISOString(CveDate.getMidnightYesterday())}`,\n      );\n    } else if (options.yesterday) {\n      const tag = options.terse ? '' : `  yesterday:  `;\n      console.log(`${tag}${CveDate.getYesterday()}`);\n    } else if (options.afterMidnightByAtMostSecs) {\n      if (\n        CveDate.getSecondsAfterMidnight() <=\n        parseInt(options.afterMidnightByAtMostSecs)\n      ) {\n        console.log(`true`);\n      } else {\n        console.log(`false`);\n      }\n    }\n    super.postrun(options);\n  }\n}","/**\n *  CveId is a simple object that represents a CVE ID and provides helper functions to use it.\n *  Each instance only holds onto a string (the CVE ID),\n *  and the class has some simple static strings and arrays.\n\n */\n\nimport process from 'process';\nimport * as dotenv from 'dotenv';\ndotenv.config();\n\n\nexport class CveIdError extends Error { }\n\nexport type CveIdComponents = [\n  boolean,\n  string | undefined,\n  string | undefined,\n  string | undefined,\n  string | undefined\n];\n\nexport class CveId {\n\n  /** kFirstYear: The first year CVE IDs started to be assigned.*/\n  static readonly kFirstYear: number = 1999;\n\n  /** kTestYear: An arbitrary year, that does not overlap with a valid CVE ID year, used for development and testing. */\n  static readonly kTestYear: number = 1970;\n\n  // lazily initialized in getAllYears()\n  private static _years: number[] = [];\n\n  /** internal representation of the CVE ID */\n  id: string;\n\n  // constructors and factories\n\n  /**\n   * @param id a CveId instance or a string representing a CVE ID (e.g., CVE-1999-0001)\n   * @throws CveIdError if id is not a valid CVE ID\n   */\n  constructor(id: string | CveId) {\n    if (CveId.toCvePath(id)) {\n      this.id = (id instanceof CveId) ? id.id : id;\n    }\n    else {\n      throw new CveIdError(`Error in CVE ID:  ${id}`);\n    }\n  }\n\n  /** returns the CVE ID as a string */\n  toString(): string {\n    return this.id;\n  }\n\n  /** properly outputs the CVE ID in JSON.stringify() */\n  toJSON() {\n    return this.id;\n  }\n\n  /**\n   * returns the partial CVE Path based on the CVE ID\n   * @returns the partial CVE path, e.g., 1999/0xxx/CVE-1999-0001\n   */\n  getCvePath(): string {\n    return CveId.toCvePath(this.id);\n  }\n\n  /**\n   * returns the full CVE Path based on the CVEID and pwd\n   * @returns the full CVE Path, e.g., /user/cve/cves/1999/0xxx/CVE-1999-0001\n   */\n  getFullCvePath(): string {\n    return `${process.cwd()}/${process.env.CVES_BASE_DIRECTORY}/${CveId.toCvePath(this.id)}`;\n  }\n\n  /**\n   * returns the raw github URL to this CVE ID\n   */\n  getRawGithubUrl(): string {\n    return `https://raw.githubusercontent.com/CVEProject/cvelistV5/main/cves/${CveId.getCveDir(this.id)}/${this.id}.json`;\n  }\n\n  // ----- static functions ----- ----- ----- -----\n\n  /**\n   * checks if a string is a valid CveID\n   *  @param id a string to test for CveID validity\n   *  @returns a tuple:\n   *    [0]:  (boolean) true iff valid CveID\n   *    [1]:  (string) \"CVE\"\n   *    [2]:  (string) year\n   *    [3]:  (string) id/thousands\n   *    [4]:  (string) id\n   *    For example, CVE-1999-12345 would return\n   *    [true,\"CVE\",\"1999\",\"12xxx\", \"12345\"]\n   */\n  static toComponents(cveId: string | CveId): CveIdComponents {\n    const id: string = (cveId instanceof CveId) ? cveId.id : cveId;\n    // assume a tup representing an invalid CVE ID\n    const tup: CveIdComponents = [false, undefined, undefined, undefined, undefined];\n    if (id === null || id === undefined || id?.length === 0) {\n      return tup;\n    }\n    const parts = id.split('-');\n    if (parts.length < 2) {\n      return tup;\n    }\n\n    const year = parseInt(parts[1]);\n    const num = parseInt(parts[2]);\n    if (parts[0] === 'CVE'\n      && CveId.getAllYears().includes(year)\n      && num >= 1) {\n      parts.shift();  // removes the 'CVE'\n      const thousands = Math.floor(num / 1000).toFixed(0);\n      return [true, \"CVE\", parts[0], `${thousands}xxx`, parts[1]];\n    }\n    else {\n      return tup;\n    }\n  }\n\n\n  /**\n   * checks if a string is a valid CveID\n   *  @param id a string to test for CveID validity\n   *  @returns true iff str is a valid CveID\n   */\n  static isValidCveId(id: string): boolean {\n    return CveId.toComponents(id)[0];\n  }\n\n\n  /** returns an array of CVE years represented as numbers (e.g. [1970,1999..2025])\n   *  the algorithm builds the valid years from 1999 to the environment variable CVES_MAX_ALLOWABLE_CVE_YEAR\n   *  (or if the environment variable is not present, current year + 2)\n   *  and adds 1970 in front for test CVEs\n   */\n  static getAllYears(): ReadonlyArray<number> {\n    // uninitialized, so initialize it\n    if (CveId._years.length === 0) {\n      const env: string | undefined = process.env.CVES_MAX_ALLOWABLE_CVE_YEAR;\n      // if the environment variable is not present, use current date + 2\n      const endYear = env ? parseInt(env) : new Date().getFullYear() + 2;\n      CveId._years = [\n        CveId.kTestYear // CveId.kTestYear used for testing, valiating. CVE REST services has a different method of validating the year. For this package, this is sufficent so including 1970 should not have any negative affects.\n      ];\n      for (let yr = CveId.kFirstYear; yr <= endYear; ++yr) {\n        CveId._years.push(yr);\n      }\n\n    }\n    return CveId._years;\n  }\n\n\n  /** given a cveId, returns the git hub repository partial directory it should go into \n   *  @param cveId string or CveId object representing the CVE ID (e.g., CVE-1999-0001)\n   *  @returns string representing the partial path the cve belongs in (e.g., /1999/1xxx)\n  */\n  static getCveDir(cveId: string | CveId): string {\n    const tup = CveId.toComponents(cveId);\n    if (tup[0] === true) {\n      return `${tup[2]}/${tup[3]}`;\n    }\n    else {\n      throw new CveIdError(`Invalid CVE ID:  ${cveId}`);\n    }\n  }\n\n  /** given a cveId, returns the git hub repository partial path (directory and filename without extension) it should go into\n   *  @param cveId string representing the CVE ID (e.g., CVE-1999-0001)\n   *  @returns string representing the partial path the cve belongs in (e.g., /1999/1xxx/CVE-1999-0001)\n   */\n  static toCvePath(cveId: string | CveId): string {\n    // const id = (cveId instanceof CveId) ? cveId.id : cveId;\n    const dir = CveId.getCveDir(cveId);\n    return `${dir}/${cveId}`;\n  }\n\n  /** comparator for use with sort() to sort CVE IDs \"numerically\" by year and then by the ID so that\n   *  CVE-1999-2001 comes before CVE-1999-10001 and CVE-2000-110022\n   *  This is needed because different systems (e.g., fs when sorting local directories, and opensearch sorted responses)\n   *  sort strings differently.  This standardizes on a single sorting algorithm\n   *  @param a string representing a CVE ID\n   *  @param b string representing another CVE ID\n   */\n  static comparator(a: string, b: string): number {\n    const [_a, aYear, aNumber] = a.split('-');\n    const [_b, bYear, bNumber] = b.split('-');\n    const yCompare = Number(aYear) - Number(bYear); // using Number() because it is faster and more correct than parsetInt\n    if (yCompare === 0) {\n      return Number(aNumber) - Number(bNumber);\n    }\n    else {\n      return yCompare;\n    }\n  }\n\n}","/**\n *  CveCore is made up of the metadata portion of a CVE JSON 5 object\n *  Note that it is convenient to store additional data for some operations,\n *  and for that, the CveCorePlus object should be used\n */\n\nimport { CveId, CveIdError } from './CveId.js';\nimport { CveMetadata } from '../generated/quicktools/CveRecordV5.js';\nimport { CveRecord } from './CveRecord.js';\n// import { IsoDateString } from '../common/IsoDate/IsoDateString.js';\nimport fs from 'fs';\n\nexport { CveId, CveIdError } from './CveId.js';\n\n// @todo should change IsoDate to IsoDateString\ntype IsoDate = string; // note, not exported, not an IsoDateString yet\n\nexport class CveCore {\n  cveId: CveId;\n  state?: string; //\"RESERVED\" | \"PUBLISHED\" | \"REJECTED\";\n  assignerOrgId?: string;\n  assignerShortName?: string;\n  dateReserved?: IsoDate;\n  datePublished?: IsoDate;\n  dateUpdated?: IsoDate;\n\n  // ----- constructors and factories ----- ----- ----- ----- -----\n\n  /**\n   * constructor which builds a minimum CveCore from a CveId or string\n   * @param cveId a CveId or string\n   */\n  constructor(cveId: string | CveId) {\n    this.cveId = cveId instanceof CveId ? cveId : new CveId(cveId);\n  }\n\n  /**\n   * builds a full CveCore using provided metadata\n   * @param metadata the CveMetadata in CVE JSON 5.0 schema\n   * @returns\n   */\n  static fromCveMetadata(metadata: Partial<CveMetadata>): CveCore {\n    const obj = new CveCore(metadata?.cveId);\n    obj.set(metadata);\n    return obj;\n  }\n\n  // ----- accessors and mutators ----- ----- ----- -----\n\n  set(metadata: Partial<CveMetadata>): void {\n    this.state = metadata?.state;\n    this.assignerOrgId = metadata?.assignerOrgId;\n    this.assignerShortName = metadata?.assignerShortName;\n    this.dateReserved = metadata?.dateReserved;\n    this.datePublished = metadata?.datePublished;\n    this.dateUpdated = metadata?.dateUpdated;\n  }\n\n  updateFromJsonString(jsonstr: string) {\n    const json = JSON.parse(jsonstr);\n    const cveId = json['cveId'];\n    if (cveId) {  // this is right now the only required property\n      this.cveId = cveId;\n      this.set(json);\n    }\n  }\n\n  /**\n   * returns the CveId from a full or partial path (assuming the file is in the repository directory)\n   *  @param path the full or partial file path to CVE JSON file\n   *  @returns the CveId calculated from the filename, or \"\" if not valid\n   */\n  static getCveIdfromRepositoryFilePath(path: string): string {\n    if (path) {\n      return path.substring(path.lastIndexOf('/') + 1, path.lastIndexOf('.'));\n    }\n    else {\n      return '';\n    }\n  }\n\n  /**\n   * returns the CveId from a full or partial path (assuming the file is in the repository directory)\n   *  @param path the full or partial file path to CVE JSON file\n   *  @returns the CveId calculated from the filename\n   */\n  static fromRepositoryFilePath(path: string): CveCore {\n    try {\n      return new CveCore(CveCore.getCveIdfromRepositoryFilePath(path));\n    }\n    catch {\n      throw new CveIdError(`Error in parsing repository file path:  ${path}`);\n    }\n  }\n\n  /** returns a CveCore object from a CveRecord */\n  static fromCveRecord(cveRecord: CveRecord): CveCore {\n    return this.fromCveMetadata(cveRecord.cveMetadata);\n  }\n\n  getCvePath(): string {\n    return this.cveId.getCvePath();\n  }\n}","/**\n * A CveSignature is a terse representation of a specific version of a CVE Record.  It is intended\n *  to be used\n *    1. to identify a specific version of CVE content since a CVE is usually published \n *        and later updated, often multiple times\n *    2. to quickly and easily verify the CVE contents of 2 copies of any CVE, for example, to \n *        compare the content on cvelistV5 against the original content from CVE REST Services\n *    3. to list (a la `ls` in `bash`) the content of a repository in a useful form for further\n *        processing (e.g., using `jq` or grep)\n *    4. to update the `deltaLog.json` file with a richer and more useful listing when listed in reversed chronological order\n *\n * It is intended to be generated at point of use, for example, by an admin or\n * an end user to verify 2 repostories\n * \n * The full form is CVE-ID|dateUpdated|sha256-of-unformatted-CVE-content, but it is intended to\n * be useful in shorter forms and when insufficient data is present to generate the full form (see below).\n * \n * For example, \n *      CVE-1999-0001|2005-12-17T00|00:00|1c195f65ce0f2ae31b35dee3706cdf740eb3b8476074dcd839b14aeba91bb223\n * for the current version of CVE-1999-0001\n * \n *      - CVE ID is required\n *      - a timestamp is required, and must be an ISO date\n *          - default is cveMetadata.dateUpdated \n *          - where timezone is not specified, GMT is assumed and added (that is to say, all timestamps ends in Z)\n *          - if not present in record, use datePublished instead, prefixed with \"published@\"\n *              e.g., \n *                  CVE-1999-0001|published@2005-12-17T00:00:00|1c195f65ce0f2ae31b35dee3706cdf740eb3b8476074dcd839b14aeba91bb223\n *      - sha256 of the unformatted json is optional for backwards compatibility as well as when performance is more important\n * \n * Acceptable forms:\n *      form 1:    CVE-1999-0001|2005-12-17T00:00:00|1c195f65ce0f2ae31b35dee3706cdf740eb3b8476074dcd839b14aeba91bb223\n *                 - full version, preferred where possible\n *      form 1p:   CVE-1999-0001|published@2005-12-17T00:00:00|1c195f65ce0f2ae31b35dee3706cdf740eb3b8476074dcd839b14aeba91bb223\n *                 - full version, preferred where possible\n *      form 2:    CVE-1999-0001|2005-12-17T00:00:00\n *                 - non-sha version for backwards compatibility and when performance/storage is more important\n *      form 2p:   CVE-1999-0001|published@2005-12-17T00:00:00\n *                 - when updated-date is not available, use published date\n *      form 3:    CVE-1999-0001|2005-12-17T00:00:00|upd:adp:xyz1234|1c195f65ce0f2ae31b35dee3706cdf740eb3b8476074dcd839b14aeba91bb223\n *                 - not implemented yet\n *                 - new full version, containing action:subaction:actor\n *                 - possibly replace existing full version\n * \n * Known bugs:\n *  1. There is an application that currently updates references in CVEs but does not change the dateUpdated field.\n *     These CVEs would be incorrectly listed since they would be listed by the dateUpdated timestamp that the CNA had updated the CVE.\n *     This bug will be fixed in summer of 2024.\n */\n\nimport crypto from 'crypto';\n\nimport { CveCore } from './CveCore.js';\nimport { CveId } from './CveId.js';\nimport { IsoDateString } from '../common/IsoDate/IsoDateString.js';\n\nexport type TimestampForm = \"dateUpdated\" | \"datePublished\";\n\nexport class CveSignature {\n  id: CveId;\n  timestamp: IsoDateString;\n  timestampForm: TimestampForm;\n  sha256: string;\n\n  constructor(id: CveId | string, timestamp: IsoDateString | string, timestampForm?: TimestampForm, sha256?: string) {\n    this.id = new CveId(id);\n    this.timestamp = (typeof timestamp === \"string\") ? new IsoDateString(timestamp, true) : timestamp;\n    this.timestampForm = (timestampForm === undefined) ? 'dateUpdated' : timestampForm;\n    this.sha256 = (sha256 === undefined) ? '' : sha256;\n  }\n\n  static fromJson(json: {}, sha256 = true): CveSignature {\n    const cveMetadata: CveCore = json['cveMetadata'];\n    if (!cveMetadata) {\n      throw new Error(`CveSignature.fromJson() JSON object is not a CVE`);\n    }\n    const cveId = new CveId(cveMetadata.cveId);\n    const timestampFormat: TimestampForm = cveMetadata.dateUpdated ? \"dateUpdated\" : \"datePublished\";\n    const timestammp = new IsoDateString((timestampFormat === \"dateUpdated\") ? cveMetadata.dateUpdated : cveMetadata.datePublished, true);\n    let sha = '';\n    if (sha256) {\n      sha = crypto.createHash(\"sha256\").update(JSON.stringify(json)).digest(\"hex\");\n    }\n    return new CveSignature(cveId, timestammp, timestampFormat, sha);\n  }\n\n  // moved to CveRecord.toCveSignature\n  // static fromJsonFile(filepath, sha256 = true): CveSignature\n\n  /**\n   * Generates a CveSignture from a string representation of the CveSignature\n   * @param signatureStr a string representation of a previously generated CveSignature\n   * @returns a rehydrated CveSignature or undefined if an error\n   */\n  static fromCveSignatureString(signatureStr: string): CveSignature | undefined {\n    if (signatureStr?.length > 0) {\n      const parts = signatureStr.split('|');\n      const cveid = parts[0];\n      let timestamp = parts[1];\n      let timestampFormat: TimestampForm = \"dateUpdated\";\n      if (timestamp.startsWith(\"published\")) {\n        timestamp = timestamp.split('@')[1];\n        timestampFormat = \"datePublished\";\n      }\n      return new CveSignature(cveid, timestamp, timestampFormat, parts[2]);\n    }\n    else {\n      return undefined;\n    }\n  }\n\n  /** returns a string representation of the CveSignature */\n  toString() {\n    const timestamp = this.timestampForm === \"dateUpdated\" ? this.timestamp : `published@${this.timestamp}`;\n    return (this.sha256?.length > 0) ? `${this.id}|${timestamp}|${this.sha256}` : `${this.id}|${timestamp}`;\n  }\n\n  /** returns a string representation for JSON.stringify() */\n  toJSON() {\n    return this.toString();\n  }\n}\n","/** a wrapper/fascade class to make it easier to work with the file system SYNCRHONOUSLY */\n\nimport fs from 'fs';\nimport path from 'path';\n\nimport unset from 'lodash.unset';\n\nexport class FsUtils {\n\n  path: string;\n\n  // /** constructor\n  //  * @param path initializes a path\n  //  */\n  constructor(path) {\n    this.path = path;\n  }\n\n  /**\n   * synchronously returns whether the path exists \n   * (very thin wrapper for fs.existsSync which is NOT deprecated, unlike fs.exists)\n   * @param path the full or partial path to test\n   * @returns true iff the specified path exists\n   */\n  static exists(path: string): boolean {\n    return fs.existsSync(path);\n  }\n\n  /**\n   * synchronously removes the specified file iff it exists\n   * @param path \n   * @returns true if the file was removed, false if it did not exist in the first place\n   */\n  static rm(path: string): boolean {\n    if (FsUtils.exists(path)) {\n      fs.rmSync(path);\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n\n  static ls(path: string): string[] {\n    const retval = [];\n    fs.readdirSync(path).forEach(file => {\n      // console.log(file);\n      retval.push(file);\n    });\n    return retval;\n  }\n\n  static deleteProperties(obj: unknown, propPath: string): unknown {\n    // console.log(`deleteProperties:  ${propPath}`);\n    const propPathComponents = propPath.split('.');\n    if (propPathComponents.length === 1) {\n      delete obj[propPathComponents[0]];\n    }\n    else {\n      const cur = propPathComponents.shift();\n      FsUtils.deleteProperties(obj[cur], propPathComponents.join('.'));\n    }\n    return obj;\n  }\n\n  /** returns true iff the content of file at path 1 and the file at path 2 are exactly the same\n   *  @param path1 the relative or fullpath to a file\n   *  @param path2 the relative or fullpath to another file\n   *  @param ignoreJsonProps optional array of json paths to ignore, e.g., [\"cveMetadata.datePublished\", \"cveMetadata.dateUpdated\", \"cveMetadata.dateReserved\"]\n   */\n  static isSameContent(path1: string, path2: string, ignoreJsonProps?: string[]): boolean {\n    if (!FsUtils.exists(path1) || !FsUtils.exists(path2)) {\n      return false;\n    }\n    const buf1 = fs.readFileSync(path1);\n    const buf2 = fs.readFileSync(path2);\n    if (!ignoreJsonProps) {\n      return buf1.equals(buf2);\n    }\n    else {\n      let json1 = JSON.parse(buf1.toString());\n      let json2 = JSON.parse(buf2.toString());\n      ignoreJsonProps.forEach(item => {\n        // json1 = FsUtils.deleteProperties(json1, item);\n        // json2 = FsUtils.deleteProperties(json2, item);\n        unset(json1, item);\n        unset(json2, item);\n      });\n      // console.log(`json1 : ${JSON.stringify(json1, null, 2)}`);\n      // console.log(`json2 : ${JSON.stringify(json2, null, 2)}`);\n      return JSON.stringify(json1) == JSON.stringify(json2);\n    }\n  }\n\n  /**\n   * Condense json data file.\n   * NOTE: Will overwrite the given file!\n   * condenseLevels:\n   *  0: pretty indent with 2 space\n   *  1: pretty indent with 1 space\n   *  2: strip leading whitespace from pretty file\n   *  3: minified / no whitespace\n   * \n   * @param condenseLevel level to condense to.\n   * @param filePath file with json data to be changed.\n   * @returns the new file size in bytes.\n   * @throws Error if invalid condenseLevel or invalid filePath argument.\n   */\n  static condenseJsonDataFile(condenseLevel: number, filePath: string): number {\n    let condenserLevels = [\n      {\n        tag: 'pretty indent with 2 space',\n        func: (data) => { return JSON.stringify(data, null, 2); },\n      },\n      {\n        tag: 'pretty indent with 1 space',\n        func: (data) => { return JSON.stringify(data, null, 1); },\n      },\n      {\n        tag: 'no whitespace indent',\n        func: (data) => { return JSON.stringify(data, null, 1).replaceAll(/^\\s+/gm, ''); },\n      },\n      {\n        tag: 'minified',\n        func: (data) => { return JSON.stringify(data, null, 0); },\n      }\n    ];\n    if (condenseLevel > condenserLevels.length) {\n      throw new Error(`Invalid condense level: ${condenseLevel}, must be between 0 and ${condenserLevels.length}`);\n    }\n    if (!FsUtils.exists(filePath)) {\n      throw new Error(`File not found!`);\n    }\n    let data = JSON.parse(fs.readFileSync(filePath, { encoding: 'utf8' }).toString());\n    let dataToWrite = condenserLevels[condenseLevel].func(data);\n    fs.writeFileSync(filePath, dataToWrite);\n    return fs.statSync(filePath).size;\n  }\n\n}","/**\r\n * Object that wraps various CVE operations into a single object, including\r\n *  - read in a CVE Record JSON v5 format file\r\n *  - auto-convert CVE Record JSON v5 format string to Cve5 object\r\n *  - output as optionally prettyprinted JSON 5 string\r\n *  - write to a file or to proper repository location\r\n *  - generate a CveSignature from the repository path\r\n *\r\n * @todo refactoring CVE IDs from string to CveId.  Currently, only using CveId class methods, but\r\n *  the data member cveId is still just a string\r\n */\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\nimport { CveId } from './CveId.js';\r\nimport { CveRecordV5, CveMetadata, Containers, AdpContainer } from '../generated/quicktools/CveRecordV5.js';\r\nimport { CveSignature } from './CveSignature.js';\r\nimport { FsUtils } from './fsUtils.js';\r\n\r\nexport { CveId, CveIdError } from './CveId.js';\r\n\r\nexport interface WriteFileOptions {\r\n  prettyprint?: boolean;\r\n}\r\n\r\nexport class CveRecord implements CveRecordV5 {\r\n  _defaultOutdir = process.env.CVE_UTILS_DEFAULT_OUTDIR;\r\n  cveId: string; // note we are still only using strings for CVE ID in CVE\r\n  containers: Containers;\r\n  cveMetadata: CveMetadata;\r\n  dataType?: string;\r\n  dataVersion?: string;\r\n  sourceObj: unknown;\r\n\r\n  // ----- constructor and factory ----- ----- ----- ----- -----\r\n\r\n  /** reads in a proper CVE Record JSON v5 format obj (e.g., JSON.parse()'d content of a file or the response from the CVE API 2.1)\r\n   *  @param obj a Javascript object that conforms to the CVE Record JSON v5 format specification\r\n   *  @todo verify it is a CVE Record JSON v5 format format that we know how to work with\r\n   */\r\n  constructor(obj: CveRecordV5) {\r\n    this.sourceObj = obj;\r\n    this.cveId = obj['cveMetadata']?.cveId;\r\n    this.containers = obj['containers'];\r\n    this.cveMetadata = obj['cveMetadata'];\r\n    this.dataType = obj['dataType'];\r\n    this.dataVersion = obj['dataVersion'];\r\n  }\r\n\r\n\r\n  /** DEPRECATED:  For all new code, use adapters/fs/CveFsReader.read() instead\r\n   *  factory method that converts a CveId to a path in the \r\n   *  default `/cves` subdirectory, and synchronously reads in that CVE JSON 5.0 formatted file \r\n   *  and builds a CveRecord\r\n   *  @deprecated use adapters/fs/CveFsReader.read() instead\r\n   *  @param cveId a string or CveId object\r\n   *  @param cves_directory (optional) relative or full path to where to find CVEs, if null, use .env spec\r\n   *    (e.g., `./test/fixtures/cve/5`)\r\n   *  @returns a CveRecord\r\n   */\r\n  static fromCveId(cve_id: string | CveId, cves_directory?:string): CveRecord | undefined {\r\n    console.log(`cve_id=${cve_id}`)\r\n    const cveId = new CveId(cve_id)\r\n    let path\r\n    if ( !cves_directory ) {\r\n      path = `${cveId.getFullCvePath()}.json`\r\n    }\r\n    else {\r\n      path = `${cves_directory}/${cveId.getCvePath()}.json`\r\n    }\r\n    console.log(`path=${path}`)\r\n    return CveRecord.fromJsonFile(path)\r\n  }\r\n\r\n  /** DEPRECATED:  New code should be using adapters/fs/CveFsReader.readFromFile() instead\r\n   *  factory method that synchronously reads in a CVE Record from a CVE JSON 5.0 formatted file\r\n   *  @deprecated use adapters/fs/CveFsReader.readFromFile() instead\r\n   *  @param relFilepath relative or full path to the file\r\n   *  @returns a CveRecord\r\n   */\r\n  static fromJsonFile(relFilepath: string): CveRecord | undefined {\r\n    if (FsUtils.exists(relFilepath)) {\r\n      const cveStr = fs.readFileSync(relFilepath, {\r\n        encoding: 'utf8',\r\n        flag: 'r',\r\n      });\r\n      const obj = JSON.parse(cveStr);\r\n      // console.log()\r\n      return new CveRecord(obj);\r\n    } else {\r\n      console.log(`CveRecord.fromJsonFile(${relFilepath}) does not exist`)\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /** returns the description from containers.cna.descriptions that has the language specified\r\n   * @param lang the ISO 639-1 lanugage code (defaults to 'en', which will also match 'en', 'En-US', 'en-uk', etc.)\r\n   * @returns the description, or undefined if it can't find the description in the specified language\r\n   */\r\n  getDescription(lang: string = 'en'): string | undefined {\r\n    const descriptions = this.containers?.cna?.descriptions;\r\n    if (descriptions && descriptions.length > 0) {\r\n      const lang_descriptions = descriptions.filter((item) =>\r\n        item.lang.toLowerCase().startsWith(lang.toLowerCase()),\r\n      );\r\n      if (lang_descriptions.length > 0) {\r\n        return lang_descriptions[0].value;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /** returns the git hub repository partial path this CveRecord should go into\r\n   *  @returns string representing the partial path the cve belongs in (e.g., /1999/1xxx/CVE-1999-0001)\r\n   */\r\n  toCvePath(): string {\r\n    return CveId.toCvePath(this.cveId);\r\n  }\r\n\r\n  /** prints object in JSON format\r\n   *  @param prettyPrint boolean to set pretty printing (default is true)\r\n   *  @returns a JSON string\r\n   */\r\n  toJsonString(prettyPrint = true): string {\r\n    if (prettyPrint) {\r\n      return JSON.stringify(this.sourceObj, null, 4);\r\n    }\r\n    else {\r\n      return JSON.stringify(this.sourceObj, null, 0);\r\n    }\r\n  }\r\n\r\n  /** generates a CveSignature */\r\n  static toCveSignature(filepath, sha256 = true): CveSignature {\r\n    if (FsUtils.exists(filepath)) {\r\n      const cveStr = fs.readFileSync(filepath, {\r\n        encoding: 'utf8',\r\n        flag: 'r',\r\n      });\r\n      const json = JSON.parse(cveStr);\r\n      // console.log()\r\n      return CveSignature.fromJson(json, sha256);\r\n    } else {\r\n      const err = new Error(`CveRecord.fromJsonFile:  the filepath '${filepath}' does not exist`);\r\n      console.error(err.message);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /** writes a CVE Record to a file in CVE JSON 5.0 format\r\n   *  @param relFilepath relative path to the file\r\n   *  @param prettyprint boolean to set whether to pretty print the output\r\n   */\r\n  writeJsonFile(relFilepath: string, prettyprint = true): void {\r\n    const value = this.toJsonString(prettyprint);\r\n    const dirname = path.dirname(relFilepath);\r\n    fs.mkdirSync(dirname, { recursive: true });\r\n    fs.writeFileSync(`${relFilepath}`, value);\r\n  }\r\n\r\n\r\n  /** writes a CVE Record to a file in CVE JSON 5.0 format\r\n   *  @param repositoryRoot path where the repository is (the full path will be determined by the CveID)\r\n   *  @param prettyprint boolean to set whether to pretty print the output\r\n   *  @returns the full path where the file was written to\r\n   */\r\n  writeToCvePath(repositoryRoot: string, prettyprint = true): string {\r\n    const fullpath = `${repositoryRoot}/${this.toCvePath()}.json`;\r\n    this.writeJsonFile(fullpath, prettyprint);\r\n    return fullpath;\r\n  }\r\n\r\n  /** Get the ADP container for a specific Org, by ID.\r\n   * @param adpOrgId the org Id for the ADP container to be found.\r\n   * @returns If found, the ADP container; Otherwise null.\r\n   */\r\n  getAdpOrgContainer(adpOrgId: string): null | any {\r\n    if (adpOrgId.length == 0) {\r\n      // ensure we never match against a missing/invalid adp org container.\r\n      // This should never occur in real data as the schema requires this field.\r\n      throw new Error(`Missing adpOrgId!`);\r\n    }\r\n    for (let adpContainer of this.containers.adp ?? []) {\r\n      if (adpContainer.providerMetadata.orgId == adpOrgId) {\r\n        return adpContainer;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @returns mapping of adp containers from their org Ids.\r\n   */\r\n  getMappedAdpByOrgId(): { [orgId: string]: AdpContainer; } {\r\n    let mapping = {};\r\n    for (let adpContainer of this.containers?.adp ?? []) {\r\n      mapping[adpContainer.providerMetadata.orgId] = adpContainer;\r\n    }\r\n    return mapping;\r\n  }\r\n}\r\n","/**\n *  CveCorePlus extends CveCore by adding things that are useful\n *  for various purposes (e.g., activity logs, delta, twitter):\n *  Currently, it adds:\n *    - description from container.cna.description\n *    - githubLink calculated based on GH_OWNER and GH_REPO currently running in\n */\n\nimport fs from 'fs';\n\nimport { CveId } from './CveId.js';\nimport { CveCore } from './CveCore.js';\nimport { CveMetadata } from '../generated/quicktools/CveRecordV5.js';\nimport { CveRecord } from './CveRecord.js';\nimport { FsUtils } from './fsUtils.js';\n\nexport { CveId } from './CveId.js';\nexport { CveCore } from './CveCore.js';\n\nexport class CveCorePlus extends CveCore {\n  description?: string;\n  githubUrl?: string;\n\n  /** optional field for storing timestamp when the update github action added\n   *  this to the repository\n   */\n  // timestampWhenCachedOnGithub?: IsoDateString; //@todo\n\n  // ----- constructors and factories ----- ----- ----- ----- -----\n\n  /**\n   * constructor which builds a minimum CveCore from a CveId or string\n   * @param cveId a CveId or string\n   */\n  constructor(cveId: string | CveId) {\n    super(cveId);\n  }\n\n  /** factory method that synchronously reads in a CVE Record from a CVE JSON 5.0 formatted file\n   *  @param relFilepath relative or full path to the file\n   *  @returns a CveCorePlus object or undefined if the JSON file cannot be read\n   */\n  static fromJsonFile(relFilepath: string): CveCorePlus | undefined {\n    if (FsUtils.exists(relFilepath)) {\n      const cveStr = fs.readFileSync(relFilepath, {\n        encoding: 'utf8',\n        flag: 'r',\n      });\n      const obj = JSON.parse(cveStr);\n\n      const cp = CveCorePlus.fromCveMetadata(obj.cveMetadata);\n      // console.log(`cveCorePlus = ${JSON.stringify(cp, null, 2)}`);\n      cp.updateFromLocalRepository();\n      cp.githubUrl = cp.cveId.getRawGithubUrl();\n      return cp;\n    } else {\n      console.log(`Error:  ${relFilepath} does not exist`);\n      return undefined;\n    }\n  }\n\n  /**\n   * builds a full CveCorePlus using provided metadata\n   * @param metadata the CveMetadata in CVE JSON 5.0 schema\n   * @returns\n   */\n  static fromCveMetadata(metadata: Partial<CveMetadata>): CveCorePlus {\n    // console.log(`metadata=${JSON.stringify(metadata, null, 2)}`)\n    const obj = new CveCorePlus(metadata?.cveId);\n    obj.set(metadata);\n    return obj;\n  }\n\n  /**\n   * builds a full CveCorePlus from a CveCore\n   * @param cveCore a CveCore object\n   * @returns a CveCorePlus object\n   */\n  static fromCveCore(cveCore: CveCore): CveCorePlus {\n    const obj = new CveCorePlus(cveCore?.cveId);\n    const json = JSON.parse(JSON.stringify(cveCore));\n    obj.set(json)\n    return obj;\n  }\n\n\n  /**\n   * builds a full CveCorePlus from a CveCore\n   * @param cveCore a CveCore object\n   * @returns a CveCorePlus object\n   */\n  static fromCveRecord(cve: CveRecord): CveCorePlus {\n    const obj = new CveCorePlus(cve?.cveId);\n    obj.set(cve)\n    obj.description = cve?.getDescription();\n    return obj;\n  }\n\n  // ----- accessors and mutators ----- ----- ----- -----\n\n  set(metadata: Partial<CveMetadata>): void {\n    super.set(metadata);\n    this.description = metadata?.description;\n  }\n\n  /**\n   * update CveCorePlus with additional data from the repository\n   * @returns true iff a JSON file was found and readable to fill in\n   * ALL the fields in the CveCorePlus data structure\n   */\n  updateFromLocalRepository(): boolean {\n    const filepath = `${this.cveId.getFullCvePath()}.json`;\n    console.log(`filepath=${filepath}`);\n    const cve = CveRecord.fromJsonFile(filepath);\n    if (cve) {\n      this.set(cve.cveMetadata);\n      this.description = cve.getDescription('en');\n      return true;\n    }\n    return false;\n  }\n\n}\n","/**\n *  This is the Delta class.  A delta is a list of files in a directory whose content changed from time T1 to T2.\n *  Changes can be a new added file, updated file, or deleted file (though currently, we do not work with deleted\n *  files since no CVEs should ever be deleted once it is published).\n *  \n *  When making zip files, this class copies CVE JSON files from /cves to a directory, and zip that, so the /cves directory\n *  needs to be in the current directory\n */\n\nimport fs from 'fs';\nimport cloneDeep from 'lodash.clonedeep';\nimport truncate from 'lodash.truncate';\n\nimport { CveId, CveCorePlus } from './CveCorePlus.js';\n\nexport type IsoDate = string; // @todo make a better class\n// export type CveId = string;   // @todo make a better class\n\nexport enum DeltaQueue {\n  kNew = 1,\n  kPublished,\n  kUpdated,\n  kError\n}\n\n/**\n * Output JSON format for delta.json and deltaLog.json based on feedback\n * from the AWG on 8/22/2023 to keep the output simple\n * \n * So internally, we are storing the full CveCorePlus, but externally,\n * and specifically when writing out to JSON, we are using this shortened format\n \n * see https://github.com/CVEProject/cvelistV5/issues/23 for some additional discussions\n * before and after the AWG meeting on 8/22\n */\nexport class DeltaOutpuItem {\n\n  static _cveOrgPrefix = `https://www.cve.org/CVERecord?id=`;\n  static _githubRawJsonPrefix = `https://raw.githubusercontent.com/CVEProject/cvelistV5/main/cves/`\n\n  cveId: string;          // string version of the CVE ID\n  cveOrgLink?: string;    // url to cve.org record\n  githubLink?: string;    // url to Github raw json\n  dateUpdated?: string;   // ISO string\n\n  static fromCveCorePlus(cvep: CveCorePlus): DeltaOutpuItem {\n    let deltaItem = new DeltaOutpuItem();\n    const cveid = cvep.cveId.toString();\n    deltaItem.cveId = cveid;\n    deltaItem.cveOrgLink = `${DeltaOutpuItem._cveOrgPrefix}${cveid}`;\n    deltaItem.githubLink = `${DeltaOutpuItem._githubRawJsonPrefix}${CveId.getCveDir(cveid)}/${cveid}.json`;\n    deltaItem.dateUpdated = cvep.dateUpdated;\n    return deltaItem;\n  }\n\n  static replacer(key: string, value: any) {\n    let items = [];\n    if (key === 'new' || key === 'updated' || key === 'error') {\n      value.forEach((item: CveCorePlus) => {\n        // Note, it is important to keep this loop as simple as possible,\n        //  don't rely on item being an actual CveCorePlus object since\n        //  it may not be depending on what built it\n        // console.log(`replacer item=${JSON.stringify(item, null, 2)}`);\n        const cveid = item.cveId.toString();\n        if (cveid) {\n          items.push({\n            cveId: cveid,\n            cveOrgLink: `${DeltaOutpuItem._cveOrgPrefix}${cveid}`,\n            githubLink: `${DeltaOutpuItem._githubRawJsonPrefix}${CveId.getCveDir(cveid)}/${cveid}.json`,\n            dateUpdated: item.dateUpdated\n          });\n        }\n      });\n      return items;\n    }\n    else {\n      return value;\n    }\n  }\n\n  toJSON() {\n    return {\n      cveId: this.cveId,\n      cveOrgLink: this.cveOrgLink,\n      githubLink: this.githubLink,\n      dateUpdated: this.dateUpdated\n    };\n  }\n}\n\n\nexport class Delta {\n\n  /** max message length for github commit messages\n   *  needed to truncate commit message when too many CVEs\n   *  were changed\n   */\n  static kMaxGithubCommitMessageLength = 65536;\n\n  fetchTime?: string;\n  // durationInMsecs?: number;   // if not set, it means that it was not calculated\n  numberOfChanges: number = 0;\n  new: CveCorePlus[] = [];\n  updated: CveCorePlus[] = [];\n  error?: CveCorePlus[] = []; // for any CVE that is not new or updated, which should never be the case except for errors\n\n  // ----- constructor and factory functions ----- ----- \n\n  /** constructor\n   *  @param prevDelta a previous delta to intialize this object, essentially prepending new\n   *                   deltas to the privous ones (default is none)\n   */\n  constructor(prevDelta: Partial<Delta> = null) {\n\n    // update with previous delta, if any\n    if (prevDelta) {\n      this.fetchTime = prevDelta?.fetchTime;\n      // this.durationInMsecs = prevDelta?.durationInMsecs\n      this.numberOfChanges = prevDelta?.numberOfChanges ?? 0;\n      this.new = prevDelta?.new ? cloneDeep(prevDelta.new) : [];\n      // this.published = prevDelta?.published ? cloneDeep(prevDelta.published) : [];\n      this.updated = prevDelta?.updated ? cloneDeep(prevDelta.updated) : [];\n      this.error = prevDelta?.error ? cloneDeep(prevDelta.error) : [];\n    }\n  }\n\n\n  static fromDeltaFile(relFilepath: string): Delta | undefined {\n    let json = {};\n    if (fs.existsSync(relFilepath)) {\n      const str = fs.readFileSync(relFilepath, { encoding: 'utf8', flag: 'r' });\n      if (str.length > 0) {\n        json = JSON.parse(str);\n      }\n      return new Delta(json);\n    }\n    return undefined;\n  }\n\n  /**\n   * updates data in new and updated lists using CVE ID\n   */\n  hydrate() {\n    this.new.forEach(item => item.updateFromLocalRepository());\n    this.updated.forEach(item => item.updateFromLocalRepository());\n  }\n\n\n  // ----- static functions ----- ----- \n\n  /** returns useful metadata given a repository filespec:\n   *   - its CVE ID (for example, CVE-1970-0001)\n   *   - its partial path in the repository (for example, ./abc/def/CVE-1970-0001)\n   *  @param path a full or partial filespec (for example, ./abc/def/CVE-1970-0001.json)\n   *  @todo should be in a separate CveId or CveRecord class\n   */\n  static getCveIdMetaData(path: string): [string | undefined, string | undefined] {\n    try {\n      const cveId = path.substring(path.lastIndexOf('/') + 1, path.lastIndexOf('.'));\n      const cveIdPath = `${CveId.toCvePath(cveId)}`;\n      return [cveId, cveIdPath];\n    }\n    catch (ex) {\n      // not a CVE, ignore and just return\n      return [undefined, undefined];\n    }\n  }\n\n\n\n  // ----- private functions ----- -----\n\n  /**\n   * pure function:  given origQueue, this will either add cve if it is not already in origQueue\n   * or replace the original in origQueue with cve\n   * @param cve the CVE to be added/replaced\n   * @param origQueue the original queue\n   * @returns a typle:  \n   *    [0] is the new queue (with the CVE either added or replace older)\n   *    [1] either 0 if CVE is replaced, or 1 if new, intended to be += to this.numberOfChanges (deprecated)\n   */\n  private _addOrReplace(cve: CveCorePlus, origQueue: CveCorePlus[]): [CveCorePlus[], 0 | 1] {\n    const i = origQueue.findIndex(item => item.cveId?.toString() == cve.cveId?.toString())\n    if (i < 0) {\n      return [[...origQueue, cve], 1];\n    }\n    else {\n      // otherwise remove the original and add the new since it is more updated\n      const newQueue = [...origQueue];\n      newQueue[i] = cve;\n      return [newQueue, 0];\n    }\n  }\n\n  // ----- member functions ----- -----\n\n  /** calculates the numberOfChanges property\n   * @returns the total number of deltas in all the queues\n   */\n  calculateNumDelta(): number {\n    this.numberOfChanges = this.new.length\n      + this.updated.length\n      + this.error.length;\n    return this.numberOfChanges\n  }\n\n  /** adds a cveCore object into one of the queues in a delta object\n   *  @param cve a CveCore object to be added\n   *  @param queue the DeltaQueue enum specifying which queue to add to\n   */\n  add(cve: CveCorePlus, queue: DeltaQueue) {\n    let tuple: [CveCorePlus[], 0 | 1];\n    switch (queue) {\n      case DeltaQueue.kNew:\n        tuple = this._addOrReplace(cve, this.new);\n        // this.numberOfChanges += tuple[1];\n        this.new = tuple[0];\n        break;\n      // case DeltaQueue.kPublished:\n      //   tuple = this._addOrReplace(cve, this.published);\n      //   this.published = tuple[0];\n      //   break;\n      case DeltaQueue.kUpdated:\n        tuple = this._addOrReplace(cve, this.updated);\n        this.updated = tuple[0];\n        break;\n      default:\n        if (cve.cveId) {\n          console.log(`pushing into error list:  ${JSON.stringify(cve)}`);\n          this.error.push(cve);\n        }\n        else {\n          console.log(`ignoring cve=${JSON.stringify(cve)}`);\n        }\n        break;\n    }\n    this.numberOfChanges = this.calculateNumDelta();\n  }\n\n  /**\n   * returns all CVEs from new and updated queues\n   */\n  getAllUniqueNewAndUpdatedCves(): Array<CveCorePlus> {\n    let retval: Array<CveCorePlus> = [];\n    let newList: Record<string, CveCorePlus> = {};\n    this.new.forEach(item => {\n      newList[item.cveId.toString()] = item;\n    });\n    this.updated.forEach(item => {\n      newList[item.cveId.toString()] = item;\n    });\n    Object.entries(newList).map((tuple) => retval.push(tuple[1]));\n    return retval;\n  }\n\n  /** summarize the information in this Delta object in human-readable form */\n  toText(): string {\n    const newCves: string[] = [];\n    this.new.forEach(item => newCves.push(item.cveId.id));\n    const updatedCves: string[] = [];\n    this.updated.forEach(item => updatedCves.push(item.cveId.id));\n    const unkownFiles: string[] = [];\n    this.error.forEach(item => unkownFiles.push(item.cveId.id));\n    let s = `${this.new.length} new | ${this.updated.length} updated`;\n    if (this.error.length > 0) {\n      s += ` | ${this.error.length} other files`;\n    }\n    let retstr =\n      `${this.numberOfChanges} changes (${s}):\n      - ${this.new.length} new CVEs:  ${newCves.join(', ')}\n      - ${this.updated.length} updated CVEs: ${updatedCves.join(', ')}\n      ${this.error.length > 0 ? `- ${this.error.length} other files: ${unkownFiles.join(', ')}` : ``}\n    `;\n    if (retstr.length > Delta.kMaxGithubCommitMessageLength) {\n      //  the '- 4' in the length is to accommodate the ',...' that lodash.truncate\n      // adds to the string when truncating\n      retstr = truncate(retstr, {\n        'length': Delta.kMaxGithubCommitMessageLength - 4,\n        'separator': ' '\n      });\n    }\n    return retstr;\n  }\n\n}","/** a wrapper/fascade class to make it easier to use git libraries from within cve utils \n *  Note that because the git utility (and thus this class and the SimpleGit library this class\n *  depends on) is meant to be used by one process at a time in each \"clone\" (i.e., each directory \n *  that contains a `.git` subdirectory), there are operations that is not easily used or tested\n *  in an asynchronous environment (e.g., cveUtils and jest tests).\n * \n *  Specifically, the methods `status()`, `add()`, and \"rm()\" can have non-deterministric behavior\n *  when used asynchronously in multiple places.\n * \n *  To successfully test these methods, follow the style/pattern of testing described in cveUtil's \n *  GitLab Issue 7.\n*/\n\nimport {\n  CommitResult,\n  Response,\n  simpleGit, SimpleGit,\n  StatusResult,\n} from 'simple-git';\n\nimport { CveCore, CveCorePlus, CveId } from './CveCorePlus.js';\nimport { Delta, DeltaQueue } from './Delta.js';\n\nexport { StatusResult, Response };\n\nexport class Git {\n\n  // fullOriginUrl: string;  // full URL with tokens and/or username/passwords\n  localDir: string; // must be an existing directory\n  git: SimpleGit;\n\n  // other credentials are in GH_XXXXX environment variables\n\n  /** constructor\n   * @param init initializer\n   */\n  constructor(init: Partial<Git> = undefined) {\n    // this.fullOriginUrl = init?.fullOriginUrl ? init.fullOriginUrl : `https://${process.env.GH_TOKEN}@github.com/${process.env.GH_OWNER}/${process.env.GH_REPO}.git`;\n    this.localDir = init?.localDir ? init.localDir : `${process.cwd()}/${process.env.CVES_BASE_DIRECTORY}`;\n    // console.log(`git working directory set to ${this.localDir}`);\n    this.git = simpleGit(this.localDir, { binary: 'git' });\n    this.git.cwd(this.localDir);\n  }\n\n  /** returns git status in a promise \n   *  Note that this operation may not be deterministic if, for example, the `rm` method is called\n   *  asynchronously elsewhere in the app.  See the note for this class above for more details.\n   * \n   *  Note that while StatusResult shows files with paths relative to pwd, working\n   *  with those files (for example, add or rm) requires a full path\n  */\n  async status(): Promise<StatusResult> {\n    const status = await this.git.status();\n    // console.log(`status=${JSON.stringify(status, null, 2)}`);\n    return status;\n  }\n\n  // generic error callback\n  static genericCallback(err) {\n    if (err) {\n      throw err;\n      console.log(`git error:  ${err}`);\n    };\n  }\n\n\n  /** calculates the delta filtering using the specified directory\n   *  @param prevDelta the previous delta\n   *  @param dir directory to filter (note that this cannot have `./` or `../` since this is only doing a simple string match)\n   */\n  static async calculateDelta(prevDelta: Partial<Delta>, dir: string): Promise<Delta> {\n    // console.log(`calcuating delta in dir=${dir}`);\n    const delta = new Delta(prevDelta);\n\n    const git: SimpleGit = simpleGit('./', { binary: 'git' });\n    const status: StatusResult = await git.status();\n    // console.log(`status = ${JSON.stringify(status, null, 2)}`);\n\n    const notAddedList = status.not_added.filter(item => item.startsWith(dir));\n    const modifiedList = status.modified.filter(item => item.startsWith(dir));\n\n    notAddedList.forEach(item => {\n      const cveId = Delta.getCveIdMetaData(item)[0];\n      if (cveId) {\n        delta.add(new CveCorePlus(cveId), DeltaQueue.kNew);\n      }\n    });\n    modifiedList.forEach(item => {\n      const cveId = Delta.getCveIdMetaData(item)[0];\n      if (cveId) {\n        delta.add(new CveCorePlus(cveId), DeltaQueue.kUpdated);\n      }\n    });\n\n    // console.log(`delta = ${JSON.stringify(delta, null, 2)}`);\n    return delta;\n  }\n\n\n  /**\n   * Factory that generates a new Delta from git log based on a time window\n   * @param start git log start time window\n   * @param stop git log stop time window (defaults to now)\n   */\n  static async newDeltaFromGitHistory(start: string, stop: string = null, repository: string = null): Promise<Delta> {\n    stop = (stop) ? stop : new Date().toISOString();\n    const localDir = repository ? repository : process.env.CVES_BASE_DIRECTORY;\n    console.log(`building new delta of ${localDir} from ${start} to ${stop}`);\n    const git = new Git({ localDir });\n    const delta = await git.logDeltasInTimeWindow(start, stop);\n    // files.forEach(element => {\n    //   const tuple = Delta.getCveIdMetaData(element);\n    //   delta.add(new CveCore(tuple[0]), DeltaQueue.kError);\n    // });\n    //    the follow is commented out because hydrate() does this on a as-needed basis    \n    //    if (fullCveCore) {\n    //      delta.new.forEach((cvep) => {\n    //        cvep.updateFromLocalRepository();\n    //      });\n    //    }\n    return delta;\n  }\n\n\n  /** git add files to git stage\n   *  Note that this operation may not be deterministic if, for example, the `rm` method is called\n   *  asynchronously elsewhere in the app.  See the note for this class above for more details.\n   *  \n   *  @param fullPathFiles a single file or array of files to be added to stage\n   *    Note that fullPathFiles must be either full path specs or partial paths from this.localDir\n   *    Note that fullPathFiles should NOT be a directory\n   * \n   */\n  async add(fullPathFiles: string | string[]): Promise<Response<string>> {\n    // console.log(`adding ${JSON.stringify(fullPathFiles)}`);\n    const retval = this.git.add(fullPathFiles, Git.genericCallback);\n    return retval;\n  }\n\n\n  /** git rm files from git stage\n   *  Note that this operation may not be deterministic if, for example, the `rm` method is called\n   *  asynchronously elsewhere in the app.  See the note for this class above for more details.\n   *  \n   *  @param fullPathFiles a single file or array of files to be added to stage\n   *    Note that fullPathFiles must be either full path specs or partial paths from this.localDir\n   *    Note that fullPathFiles should NOT be a directory\n  */\n  async rm(fullPathFiles: string | string[]): Promise<Response<void>> {\n    const retval = this.git.rm(fullPathFiles, Git.genericCallback);\n    return retval;\n  }\n\n\n  // // see https://github.com/steveukx/git-js/blob/main/simple-git/test/unit/fetch.spec.ts for examples\n  // async fetch(): Promise<Response<FetchResult>> {\n  //   const retval = this.git.fetch(Git.genericCallback)\n  //   return retval\n  // }\n\n  // @todo:  implement pull\n\n  /**\n   * commits staged files\n   * @param msg commit message \n   * @returns CommitResult\n   * \n   */\n  async commit(msg: string): Promise<CommitResult> {\n    const retval = this.git.commit(msg, Git.genericCallback);\n    return retval;\n  }\n\n  /**\n   *  logs commit hash and date between time window\n   */\n  async logCommitHashInWindow(start: string, stop: string): Promise<string[]> {\n    // console.log(`logCommitHashInWindow(${start},${stop})`);\n    const response = await this.git.raw(\n      'log',\n      `--after=\"${start}\"`,\n      `--before=\"${stop}\"`,\n      // `--pretty=format:\"%H %ci\"`,\n      `--pretty=format:\"%H\"`,\n      `--relative=${this.localDir}`\n    );\n    let retval: string[] = [];\n    if (response.length > 0) {\n      let split = response.split('\\n');\n      split.forEach(item => retval.push(item.split('\"')[1]));\n    }\n    // console.log(`retval from logCommitHashInWindow():  ${retval}`);\n    return retval;\n  }\n\n  /**\n   *  logs changed filenames in time window\n   */\n  async logChangedFilenamesInTimeWindow(start: string, stop: string): Promise<string[]> {\n    // console.log(`logChangedFilenamesInTimeWindow(${start},${stop})`);\n    const commits = await this.logCommitHashInWindow(start, stop);\n    // console.log(`commits=${commits}`);\n    if (commits.length > 0) {\n      const files = await this.git.raw(\n        'diff',\n        `--name-only`,\n        `${commits[0]}..${commits[commits.length - 1]}`,\n        `--relative=${this.localDir}`);\n      // console.log(`retval from logChangedFilenamesInTimeWindow:  ${files}`);\n      let retval: string[] = files.split('\\n');\n      if (retval[retval.length - 1] === \"\") {\n        // remove last empty \\n\n        retval.pop();\n      }\n      return retval;\n    }\n    else {\n      return [];\n    }\n  }\n\n  /**\n   *  logs deltas in time window\n   */\n  async logDeltasInTimeWindow(start: string, stop: string): Promise<Delta> {\n    // console.log(`logChangedFilenamesInTimeWindow(${start},${stop})`);\n    const commits = await this.logCommitHashInWindow(start, stop);\n    // console.log(`retval from logCommitHashInWindow:  ${JSON.stringify(commits)}`);\n    const delta = new Delta();\n\n    if (commits.length > 0) {\n      const data = await this.git.raw(\n        'diff',\n        `--raw`,\n        `${commits[commits.length - 1]}..${commits[0]}`,\n        `--relative=${this.localDir}`);\n      // console.log(`retval from diff between commits ${commits[commits.length - 1]}..${commits[0]}:\\n  ${data}`);\n      const lines: string[] = data.split('\\n');\n      // remove last empty \\n\n      lines.pop();\n      lines.forEach(line => {\n        const [a, b, c, d, subline] = line.split(' ');\n        const action = subline[0];\n        const path = `${this.localDir}/${subline.substring(1).trim()}`;\n        console.log(`line=${line}`);\n        console.log(`action=${action}  path=${path}`);\n        const cveId = CveCore.getCveIdfromRepositoryFilePath(path);\n        if (CveId.isValidCveId(cveId)) {\n          switch (action) {\n            case 'A':\n              delta.add(CveCorePlus.fromJsonFile(path), DeltaQueue.kNew);\n              break;\n            case 'M':\n              delta.add(CveCorePlus.fromJsonFile(path), DeltaQueue.kUpdated);\n              break;\n            default:\n              delta.add(CveCorePlus.fromJsonFile(path), DeltaQueue.kError);\n              break;\n          }\n        }\n        else {\n          //skip since it's not a CVE\n        }\n      });\n    }\n    return delta;\n  }\n\n  /**\n   * @returns string, commit id of the given repo.\n   */\n  async getLocalRepoLatestCommitHash(): Promise<string> {\n    let result = (await this.git.raw(`rev-parse`, `HEAD`)).trim();\n    return result;\n  }\n\n  /**\n   * @param hash the commit hash\n   * @param filePath the file path relative to the base of the repo.\n   * @returns file contents at the given hash\n   */\n  async getFileContentsAtHash(hash: string, filePath: string): Promise<string> {\n    let result = await this.git.raw(\n      'show',                         // git show\n      `${hash}:${filePath}`,          // at time of hash:for this file,\n      `--relative=${this.localDir}`\n    );\n    return result;\n  }\n}","/**\n *  DeltaFs performs file system operations for Delta.\n *  \n *  When making zip files, this class copies CVE JSON files from /cves to a directory, and zip that, so the /cves directory\n *  needs to be in the current directory\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport process from 'process';\n\nimport AdmZip from 'adm-zip';\n\nimport { CveId } from './CveCorePlus.js';\nimport { DeltaOutpuItem, Delta } from './Delta.js';\nimport { FsUtils } from './fsUtils.js';\n\nexport type IsoDate = string; // @todo make a better class\n// export type CveId = string;   // @todo make a better class\n\n\nexport class DeltaFs extends Delta {\n\n  constructor(delta?: Delta) {\n    super(delta);\n  }\n\n  /** writes the delta to a JSON file\n   *  @param relFilepath relative path from current directory\n  */\n  writeFile(relFilepath: string = null): void {\n    relFilepath = relFilepath ? relFilepath : `${process.env.CVES_BASE_DIRECTORY}/delta.json`;\n    // console.log(`relFilepath=${relFilepath}`);\n    const dirname = path.dirname(relFilepath);\n    fs.mkdirSync(dirname, { recursive: true });\n    if (!this.fetchTime) {\n      this.fetchTime = new Date().toISOString();\n    }\n    const outputJson =\n      fs.writeFileSync(`${relFilepath}`, JSON.stringify(\n        this,\n        DeltaOutpuItem.replacer,\n        2));\n    console.log(`delta file written to ${relFilepath}`);\n  }\n\n\n  /**\n   * Copies delta CVEs to a specified directory, and optionally zip the resulting directory\n   * @param relDir optional relative path from current directory to write the delta CVEs, default is `deltas` directory\n   * @param zipFile optional relative path from the current directory to write the zip file, default is NOT to write to zip\n   */\n  writeCves(relDir: string | undefined = undefined, zipFile: string | undefined = undefined): void {\n    const pwd = process.cwd();\n    relDir = relDir ? relDir : `${pwd}/deltas`;\n    fs.mkdirSync(relDir, { recursive: true });\n    console.log(`copying changed CVEs to ${relDir}`);\n    this.new.forEach(item => {\n      const cveid = new CveId(item.cveId);\n      const cvePath = cveid.getFullCvePath();\n      console.log(`  ${item.cveId.id} (new)`);\n      fs.copyFileSync(`${cvePath}.json`, `${relDir}/${item.cveId.id}.json`);\n    });\n    this.updated.forEach(item => {\n      const cveid = new CveId(item.cveId);\n      const cvePath = cveid.getFullCvePath();\n      console.log(`  ${item.cveId.id} (updated)`);\n      fs.copyFileSync(`${cvePath}.json`, `${relDir}/${item.cveId.id}.json`);\n    });\n    console.log(`${this.numberOfChanges} CVEs copied to ${relDir}`);\n\n    if (zipFile) {\n      const listing = FsUtils.ls(relDir);\n      DeltaFs.generateZipfile(listing, zipFile, \"deltaCves\", relDir);\n      console.log(`zip file generated as ${relDir}/${zipFile}`);\n    }\n  }\n\n  writeTextFile(relFilepath: string = null): void {\n    relFilepath = relFilepath ? relFilepath : 'delta.md';\n    let text = this.toText();\n    if (text.length === 0) {\n      text = \"no files were changed\";\n    }\n    fs.writeFileSync(relFilepath, text);\n  }\n\n\n  /**\n   * Synchronously generate a zip file from an array of files (no directories)\n   * @param filepaths array of filenames to be zipped\n   * @param resultFilepath filepath for resulting zip file\n   * @param zipVirtualDir dir name in zip, defaults to `files`\n   *                      (for example, if you want to add all the files \n   *                       into a zip folder called abc, \n   *                        you would pass 'abc' here)\n   * @param dir path to directory where files are located\n   */\n  static generateZipfile(\n    filepaths: string | string[],\n    resultFilepath: string,\n    zipVirtualDir = `files`,\n    dir = ''\n  ) {\n    console.log(`generating zip file from ${filepaths} to ${resultFilepath}`);\n    // if path to resultFilepath does not exist, recursively make them\n    const dirname = path.dirname(resultFilepath);\n    fs.mkdirSync(dirname, { recursive: true });\n    const zip = new AdmZip;\n    if (!Array.isArray(filepaths)) {\n      filepaths = [filepaths];\n    }\n    filepaths.forEach(filepath => {\n      const path = (dir.length > 0) ? `${dir}/${filepath}` : filepath;\n      zip.addLocalFile(path, zipVirtualDir);\n    });\n    zip.writeZip(resultFilepath);\n    // console.log(`zip file generated at ${resultFilepath}`);\n  }\n\n}","import { Command } from 'commander';\nimport format from 'date-fns/format';\nimport endOfYesterday from 'date-fns/endOfYesterday';\nimport startOfYesterday from 'date-fns/startOfYesterday';\n\nimport { CveDate } from '../core/CveDate.js';\nimport { Delta } from '../core/Delta.js';\nimport { GenericCommand } from './GenericCommand.js';\nimport { Git } from '../core/git.js';\nimport { DeltaFs } from '../core/DeltaFs.js';\n\nexport class DeltaCommand extends GenericCommand {\n  constructor(program: Command) {\n    const name = 'delta';\n    super(name, program);\n    this._program\n      .command(name)\n      .description('cve deltas (cve file changes)')\n      .option(\n        '--start <ISO timestamp>',\n        'show CVEs changed starting from <ISO timestamp>, defaults to UTC midnight of today',\n        `${CveDate.getMidnight().toISOString()}`,\n      )\n      .option(\n        `--yesterday-all`,\n        'do a delta of all of the CVEs changed yesterday',\n      )\n      // .option('--repository <path>', 'set repository, defaults to env var CVES_BASE_DIRECTORY', process.env.CVES_BASE_DIRECTORY)\n      .action(this.run);\n  }\n\n  async run(options) {\n    super.prerun(options);\n\n    if (options.yesterdayAll) {\n      const timestamp = startOfYesterday();\n      const delta = await Git.newDeltaFromGitHistory(\n        timestamp.toISOString(),\n        endOfYesterday().toISOString(),\n      );\n      console.log(`delta=${JSON.stringify(delta, null, 2)}`);\n      console.log(delta.toText());\n      const date = format(timestamp, 'yyyy-MM-dd');\n      // const time = format(timestamp, 'HH');\n      const deltaFilename = `${date}_delta_CVEs_at_end_of_day`;\n      const deltaFs = new DeltaFs(delta);\n      deltaFs.writeFile(`${deltaFilename}.json`);\n      deltaFs.writeCves(undefined, `${deltaFilename}.zip`);\n      deltaFs.writeTextFile(`release_notes.md`);\n    } else {\n      const timestamp = new Date();\n      const delta = await Git.newDeltaFromGitHistory(options.start);\n      // console.log(`delta=${JSON.stringify(delta, null, 2)}`);\n      console.log(delta.toText());\n      const date = format(timestamp, 'yyyy-MM-dd');\n      const time = format(timestamp, 'HH');\n      const deltaFilename = `${date}_delta_CVEs_at_${time}00Z`;\n      const deltaFs = new DeltaFs(delta);\n      deltaFs.writeFile(`${deltaFilename}.json`);\n      deltaFs.writeCves(undefined, `${deltaFilename}.zip`);\n      deltaFs.writeTextFile(`release_notes.md`);\n    }\n    super.postrun(options);\n  }\n}","/**\n *  FsReader performs synchronous local file system operations in read-only mode with no side effects\n */\n\nimport fs from 'fs';\nimport path from 'path';\n\nexport type FsAdapterType = \"RO\" | \"Mutating\";\n\nexport class FsReader {\n\n  private _relfilepath: string;\n  public get relFilepath(): string {\n    return this._relfilepath;\n  }\n  // prevent setting relfilepath after initializing it in the constructor\n  // public set relfilepath(value: string) {\n  //   this._relfilepath = value;\n  // }\n\n  /** constructor\n   *  @param filepath the relative path this adapter will work with\n   *  Note that in this class, once the relfilepath is set, it should not be modified\n   *  If you need to modify it, create a new one of the new relfilepath\n   */\n  constructor(relfilepath) {\n    this._relfilepath = relfilepath;\n  }\n\n  /** always returns false for this class */\n  canMutate(): boolean {\n    return false;\n  }\n\n\n  /**\n   * synchronously returns whether this path exists \n   * @returns true iff the specified path exists\n   */\n  exists(): boolean {\n    return FsReader.exists(this.relFilepath);\n  }\n\n\n  /** synchronously reads a string from a file\n   *  @param data the data preformatted as a string (this means any formatting must be done before the call)\n  */\n  readAll(): string {\n    // console.log(`relFilepath=${relFilepath}`);\n    if (fs.existsSync(this.relFilepath)) {\n      return fs.readFileSync(this.relFilepath, { encoding: 'utf8', flag: 'r' });\n    }\n    // console.log(`delta file written to ${this.relFilepath}`);\n    else {\n      throw (new Error(`filepath ${this.relFilepath} does not exist, nothing could be read`));\n      return \"\";\n    }\n  }\n\n\n  // ----- static utility versions of class methods\n\n\n  /**\n   * synchronously returns whether the path exists \n   * (very thin wrapper for fs.existsSync which is NOT deprecated, unlike fs.exists)\n   * @param path the full or partial path to test\n   * @returns true iff the specified path exists\n   */\n  static exists(path: string): boolean {\n    return fs.existsSync(path);\n  }\n\n}","/**\n *  reader for CveRecords\n * \n */\n\nimport path from 'path';\n\nimport { CveId } from '../../core/CveId.js';\nimport { CveRecord } from '../../core/CveRecord.js';\nimport { FsReader } from './FsReader.js';\n\nexport class CveFsReader {\n\n  static kDefaultCvesBaseDir = process.env.CVES_BASE_DIRECTORY;\n\n  // ----- static functions ----- ----- ----- ----- ----- ----- ----- ----- ----- \n\n  /** constructs a CveRecord by reading in the associateed JSON file at relpath\n   *  @param relpath relative  to file\n   *  @returns the hydrated CVE Record, or undefined if it does not exist in relpath\n  */\n  static readFromFile(\n    relpath: string\n  ): CveRecord {\n    const adapter = new FsReader(relpath);\n    try {\n      const str = adapter.readAll();\n      let json = [];\n      if (str.length > 0) {\n        json = JSON.parse(str);\n        // console.log(`json:  ${JSON.stringify(json, null, 2)}`);\n        const cve = new CveRecord(json);\n        return cve;\n      }\n      else {\n        return undefined;\n      }\n    }\n    catch (e) {\n      console.log(`error reading from ${relpath}:  ${e}`);\n      return undefined;\n    }\n  }\n\n\n  /** constructs a CveRecord by reading in the associateed JSON file for the CVE ID\n   *  optionally reading from a different location than the default /cves\n   *  @param cveId the CVE ID to read in\n   *  @param cvesPath optional path /cves, default is specified in environment variable\n   *  @returns the hydrated CVE Record, or undefined if it does not exist in /cves\n  */\n  static read(\n    cveId: CveId | string,\n    cvesPath?: string\n  ): CveRecord | undefined {\n    if (!cvesPath) {\n      cvesPath = CveFsReader.kDefaultCvesBaseDir;\n      console.log(`using cves at ${cvesPath}`);\n    }\n    const cveIdPartialPath = CveId.toCvePath(cveId);\n    const fullpath = path.join(cvesPath, `${cveIdPartialPath}.json`);\n    return CveFsReader.readFromFile(fullpath);\n  }\n}","import fs from 'fs';\n\n/**\n * Callback signature for CveListDir.walkDir()\n */\nexport type CveListDirWalkDirCallback = (file: fs.Dirent, files: fs.Dirent[]) => void;\n\n/** options for CveListDir.walkDir()\n *    - `recursive` recursively walks down a full hierarchy, default: true\n *    - `ignoreLinuxInvisible` ignores Linux/MacOSX invisible files\n *        - default: true\n *        - note: DOES NOT work on Windows\n*/\nexport type CveListDirWalkDirOptions = {\n  recursive?: boolean,\n  ignoreLinuxInvisible?: boolean;\n};\n\n/**\n * Class for working with a directory of CVE listings\n */\nexport class CveListDir {\n\n  /** walks a directory hierarchy to perform operations in callback\n   *  Note that one odd behavior right now is that if there is an invisible directory with visible files,\n   *    it will list the visible files even though it will ignore the invisible directory\n   *  Note on Windows:  Currently, the ignoreInvisible flag is only for Linux/MacOSX, \n   *    so all Windows files and directories will be included regardless of the ignoreLinuxInvisible setting\n   *  @param path the path to walk\n   *  @param callback function of the WalkDirCallback type to call after walking the path\n   *  @param options optional options (see WalkDirOptions)\n   */\n  static walkDir = (\n    path: string,\n    callback: CveListDirWalkDirCallback,\n    options: CveListDirWalkDirOptions = undefined\n  ): void => {\n    try {\n      const recursive = (options?.recursive) ?? true;\n      const ignoreInvisible = (options?.ignoreLinuxInvisible) ?? true;\n      let files = fs.readdirSync(path, {\n        recursive,\n        withFileTypes: true,\n      });\n      if (ignoreInvisible) {\n        files = files.filter(item => !(/(^|\\/)\\.[^\\/\\.]/g).test(item.name));\n      }\n      for (const file of files) {\n        callback(file, files);\n      }\n    } catch (err) {\n      console.error(err);\n      throw err;\n    }\n  };\n}","/**\n * a CveSignatureListing is a JavaScript Array of CveSignatures.  These are useful for\n *    - summarize a set of CVEs (e.g., cvelist, opensearch)\n *    - diff between 2 listings to show missing/obsolete CVEs\n */\n\nimport fs from 'fs';\nimport { CveSignature } from './CveSignature.js';\nimport { IsoDateString } from '../common/IsoDate/IsoDateString.js';\n\n/** a sorted listing (array) of CveSignatures, which uniquely fingerprints a set of CVEs */\n// export type CveSignatureListingType =\n//   \"deltalog\";  // from a deltaLog\n// | \"opensearch-listing\"  // from a opensearch listing\n// | \"opensearch-updatelog\";  // from a opensearch updatelog\n\nexport type CveSignatureSorter\n  = 'none'\n  // | 'cveid'\n  | 'dateUpdated'\n  // | 'opensearch_ingest_timestamp'\n  // | 'github_fetch_timestamp'\n  | 'lexical'\n  | 'reversedDateUpdated'\n\nexport class CveSignatureListing extends Array<CveSignature> {\n  // type: CveSignatureListingType;\n  // timestamp: IsoDateString;\n  // sort: string\n\n  // standardized sorting algorithms ----- ----- ----- ----- ----- ----- ----- -----\n\n  /** sort by lexcial (i.e., by the full CveSignature as if it is a string)\n   *  this is not the same as a sort by CVE ID, since CVE-1970-11000 comes before CVE-1970-2000\n   */\n  static sortLexical(a: CveSignature, b: CveSignature) {\n    return a.toString().localeCompare(b.toString());\n  }\n\n  /** sort by the 2nd part of a CveSignature, note that in the case\n   *  where a dateUpdated is not available and a published@ prefix\n   *  is added for the datePublished, the sort properly looks at the\n   *  date and not the prefix\n   */\n  static sortByDateUpdated(a: CveSignature, b: CveSignature) {\n    return a.timestamp.toString().localeCompare(b.timestamp.toString());\n  }\n\n  /** reverse sort using the 2nd part of a CveSignature, note that in the case\n   *  where a dateUpdated is not available and a published@ prefix\n   *  is added for the datePublished, the sort properly looks at the\n   *  date and not the prefix\n   */\n  static sortByReversedDateUpdated(a: CveSignature, b: CveSignature) {\n    return b.timestamp.toString().localeCompare(a.timestamp.toString());\n  }\n\n  // factories ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- \n\n  /**\n   * Builds a full CveSignatureListing from a parsed deltalog\n   * @param log a parsed DeltaLog with proper Delta entries\n   * @param sortBy optional sort algorithm (default is lexical+reversedDateUpdated)\n   *  Note that if 2 CVEs have the same dateUpdated, they will be returned\n   *    in the original order they appeared in log.  If you want to sort by dateUpdated\n   *    and CVE ID, you will need to first sort by CVE ID, then by dateUpdated.\n   * @param start: optional timestamp to trim the log (default is 1970-01-01,\n   *                which effectively provides all entries in the deltaLog, which is about 30 days worth)\n   * @todo should be Deltalog.toCveSignatureListing() \n   */\n  static fromDeltalog(\n    log: unknown[],\n    // numRequested = 100,\n    sortBy: CveSignatureSorter = 'reversedDateUpdated',\n    start: IsoDateString = null,\n  ): CveSignatureListing {\n    start = (start) ?? new IsoDateString('1970-01-01T00:00:00.000Z');\n    console.log(`fromDeltalog.start:  ${start}`);\n    let listing: CveSignatureListing = new CveSignatureListing();\n    const cveInfoList = [];\n    const startTimestamp = start.toString();\n    for (let i = 0; i < log.length; i++) {\n      let entry = log[i];\n      if (entry['fetchTime'] >= startTimestamp) {\n        cveInfoList.push(...entry['new']);\n        cveInfoList.push(...entry['updated']);\n      }\n      else {\n        break;\n      }\n      // });\n    }\n    cveInfoList.forEach(info => {\n      let id: CveSignature = new CveSignature(info['cveId'], info['dateUpdated'], \"dateUpdated\");\n      listing.push(id);\n    });\n\n    // always needs to sort lexically first\n    listing = listing.sort(CveSignatureListing.sortLexical);\n\n    switch (sortBy) {\n      case 'lexical': // @todo this is currently returning a string compare, not CVE ID compare\n        listing = listing.sort(CveSignatureListing.sortLexical);\n        break;\n      case 'dateUpdated':\n        listing = listing.sort(CveSignatureListing.sortByDateUpdated);\n        break;\n      case 'reversedDateUpdated':\n        listing = listing.sort(CveSignatureListing.sortByReversedDateUpdated);\n        break;\n      default:\n        console.log(`Cannot sort by ${sortBy} yet, returning listing in dateUpdated sort`);\n        break;\n    }\n\n    return listing;\n  }\n\n\n  static fromCveSignatureListingFile(relFilepath: string): CveSignatureListing {\n    const listing: CveSignatureListing = new CveSignatureListing();\n    if (fs.existsSync(relFilepath)) {\n      let json = [];\n      const str = fs.readFileSync(relFilepath, { encoding: 'utf8', flag: 'r' });\n      if (str.length > 0) {\n        json = JSON.parse(str);\n      }\n      json.forEach((ele: string) => {\n        const sig: CveSignature = CveSignature.fromCveSignatureString(ele);\n        if (sig) {\n          listing.push(sig);\n        }\n      });\n    }\n    return listing;\n  }\n\n  static fromCveSignatureListing(list: string[]): CveSignatureListing {\n    const listing: CveSignatureListing = new CveSignatureListing();\n    list.forEach((ele: string) => {\n      const sig: CveSignature = CveSignature.fromCveSignatureString(ele);\n      if (sig) {\n        listing.push(sig);\n      }\n    });\n    return listing;\n  }\n\n  // collapseToLatestCvesOnly ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- \n\n  /** removes all CveSignatures which differ only by timestamp, retaining only the most recent one */\n  static collapseToLatestCvesOnly(listing: CveSignatureListing): CveSignatureListing {\n    // listing = listing.sort(CveSignatureListing.sortByReversedDateUpdated);\n    // listing = listing.sort(CveSignatureListing.sortLexical);\n    // let lastCveId: string = null;\n    // const collapsed = listing.filter((ele) => {\n    //   const shouldAdd = (ele.id.id !== lastCveId);\n    //   lastCveId = ele.id.id;\n    //   return shouldAdd;\n    // });\n\n    const map = new Map<string, CveSignature>();\n    listing.map((ele) => {\n      const id = ele.id.id;\n      if (!map.get(id)) {\n        map.set(id, ele);\n      }\n      else {\n        const mapped = map.get(id);\n        if (ele.timestamp > mapped.timestamp) {\n          map.set(id, ele);\n        }\n      }\n    });\n    let collapsed: CveSignatureListing = new CveSignatureListing();//[...map.values()] as CveSignatureListing;\n    for (let element of map.values()) {\n      collapsed.push(element);\n    }\n    collapsed = collapsed.sort(CveSignatureListing.sortByReversedDateUpdated);\n    return collapsed;\n  }\n\n\n  /**\n   * returns this listing as a string[], useful for writing to a file or \n   * for comparing 2 listings\n   * @param options optional options\n   *        excludeSha specifies whether to include the SHA, if a SHA exists  \n   *        if true, returns form 2\n   *        else returns form 1 if possible, or form 2 if no SHA is available\n   * @returns \n   */\n  toStringArray(options?: { excludeSha?: boolean; }): string[] {\n    const listing: string[] = [];\n    this.map(ele => {\n      if (options?.excludeSha) {\n        listing.push(`${ele.id}|${ele.timestamp}`);\n      }\n      else {\n        listing.push(ele.toString());\n      }\n    });\n    return listing;\n  }\n\n  // trim \n\n  /** trims and returns a new CveSignatureListing\n   *  containing only entries between the specified dates (inclusive)\n   *  @param startDate date to stop (inclusive)\n   *  @param stopDate date to start (inclusive, and if not specified, defaults to now)\n   */\n  trimByDateUpdated(\n    startDate: IsoDateString | string,\n    stopDate: IsoDateString | string = null\n  ) {\n    if (!stopDate) {\n      stopDate = new IsoDateString();\n    }\n    let startDateString = startDate.toString();\n    let stopDateString = stopDate.toString();\n    if (stopDateString < startDateString) {\n      const stopStr = stopDateString;\n      stopDateString = startDateString;\n      startDateString = stopStr;\n    }\n    const trimmed = this.filter((ele) => {\n      const timestampStr = ele.timestamp.toString();\n      const shouldKeep = (timestampStr <= stopDateString && timestampStr >= startDateString);\n      return shouldKeep;\n    });\n    return trimmed as CveSignatureListing;\n  }\n\n  // diff ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- \n\n  /** returns a CveSignatureDiff object containing the differences between\n   *  this object (lhs) and the rhs \n   *  @param rhs the \"right hand side\" CveSignatureListing to compare with\n   */\n  diff(\n    rhs: CveSignatureListing,\n    options?: {\n      ignoreSha?: boolean,\n      sortBy?: CveSignatureSorter;\n    }): CveSignatureDiff {\n    let sorter;\n    const useOption = {\n      ignoreSha: (options) ? options.ignoreSha : false,\n      sortBy: (options) ? options.sortBy : 'reversedDateUpdated'\n    };\n    switch (useOption.sortBy) {\n      case 'reversedDateUpdated':\n        sorter = CveSignatureListing.sortByReversedDateUpdated;\n        break;\n    }\n    this.sort(sorter);\n    rhs.sort(sorter);\n\n    let diff = new CveSignatureDiff();\n    if (rhs === this) {\n      return diff;\n    }\n    else {\n      // const excludeSha = options?.ignoreSha\n      const arrayLstr = this.toStringArray({ excludeSha: useOption.ignoreSha });\n      // const arrayL: string[] = JSON.parse(arrayLstr);\n      const arrayRstr = rhs.toStringArray({ excludeSha: useOption.ignoreSha });\n      // const arrayR: string[] = JSON.parse(arrayRstr);\n      // const missingLeft = rhs.filter((ele) => this.find(ele => ele.timestamp));\n\n      diff.missingLeft = arrayRstr.filter((ele => arrayLstr.indexOf(ele) < 0));\n      // diff.missingRight = arrayL.filter((ele => arrayR.indexOf(ele) < 0));\n      diff.missingRight = arrayLstr.filter((ele => arrayRstr.indexOf(ele) < 0));\n      return diff;\n    }\n  }\n}\n\nexport class CveSignatureDiff {\n  missingLeft: string[];   // [\"CVE-1970-10000|timestamp\"],\n  missingRight: string[];  // [\"CVE-1970-20000|timestamp\"],\n  // newerLeft: CveSignature[];   // [\"CVE-1970-10003|timestamp\"],\n  // newerRight: CveSignature[];   // [\"CVE-1970-10004|timestamp\"],\n  // differentTimestamp: [\n  //   {\n  //     left: CveSignature[]   // \"CVE-1970-10000|2024-04-04T00:00:00.001Z\",\n  //     right: CveSignature[]   // : \"CVE-1970-10000|2024-04-04T00:00:00.002Z\";\n  //   }\n  // ]\n  // differentSha: CveSignature[]\n  // same: CveSignature[];\n  constructor() {\n    this.missingLeft = [];\n    this.missingRight = [];\n  }\n};\n","import { IsoDateString } from '../../common/IsoDate/IsoDateString.js';\nimport { CveFsReader } from '../../adapters/fs/CveFsReader.js';\nimport { CveCore } from '../../core/CveCore.js';\nimport { CveListDir } from '../../core/CveListDir.js';\nimport { CveRecord } from '../../core/CveRecord.js';\nimport { CveSignatureListing } from '../../core/CveSignatureListing.js';\nimport { FsUtils } from '../../core/fsUtils.js';\n\nexport type ListOptions = {\n  sha256?: boolean,\n  start?: IsoDateString,\n  stop?: IsoDateString,\n\n  sortby_reversedDateUpdated?: boolean,\n}\n\n/** object that can generate various CveSignatureListings */\nexport class ListManager {\n\n  private constructor() {\n  }\n\n  /** generates a CveSignatureListing for dir\n   *  @param filepath full or partial path to cves directory\n   *  @param ignoreSha optional boolean to not generate SHA256\n   *  @returns returns a lexically sorted listing of filepath\n   */\n  static fromDir(\n    filepath: string,\n    opts?: ListOptions\n  ): {\n    listing: CveSignatureListing,\n    filesnames: string[],\n    dirsTraversed: string[];\n  } {\n    const options = {\n      sha256: opts?.sha256 ?? true,\n      start: opts?.start ?? new IsoDateString(\"1970-01-01T00:00:00.000Z\"),\n      stop: opts?.stop ?? new IsoDateString(),\n      sortby_reversedDateUpdated: opts?.sortby_reversedDateUpdated ?? false\n    }\n\n    let listing = new CveSignatureListing();\n    let files: string[] = [];\n    let dirs: string[] = [];\n    if (!FsUtils.exists(filepath)) {\n      const content = `error:  Cannot construct a listing from ${filepath} because that directory does not exist.`;\n      console.log(content);\n      throw new Error(content);\n    } else {\n      try {\n        const startStr = options.start.toString();\n        const stopStr = options.stop.toString()\n        CveListDir.walkDir(filepath, (file) => {\n          const fullpath = `${file.parentPath}/${file.name}`;\n          if (file.isFile()) {\n            if (file.name.startsWith('CVE-')\n              && file.name.endsWith('json')) {\n              files.push(fullpath);\n              const cveRecord = CveFsReader.readFromFile(fullpath);\n              const cve = CveCore.fromCveRecord(cveRecord);\n              if (\n                (cve.dateUpdated && (cve.dateUpdated >= startStr && cve.dateUpdated <= stopStr))\n                || (cve.datePublished && (cve.datePublished >= startStr && cve.datePublished <= stopStr))\n              ) {\n                const cveSignature = CveRecord.toCveSignature(fullpath, options?.sha256);\n                listing.push(cveSignature);\n              }\n            }\n          }\n          else {\n            if (!file.name.startsWith('.')) {\n              dirs.push(fullpath);\n            }\n          }\n        }, { recursive: true, ignoreLinuxInvisible: true });\n        // console.log(`files:  ${JSON.stringify(files, null, 2)}`);\n        // console.log(`dirs:  ${JSON.stringify(dirs, null, 2)}`);\n        // console.log(`listing:  ${JSON.stringify(listing, null, 2)}`);\n      }\n      catch (err) {\n        console.error(`error:  ${JSON.stringify(err.message)}`);\n      }\n    }\n    // it's important to sort the listing lexically before returning, even if another sort is required later, since\n    //  tests prove that using just the raw output can cause inconsistent results if they don't all start at a known\n    //  state (e.g., CVEs with the same updated dates may appear in a different order on different machines since\n    // they may be updated at different times with different groups).  This sort provides that known state.\n    listing = listing.sort(CveSignatureListing.sortLexical);\n    if (options.sortby_reversedDateUpdated) {\n      listing = listing.sort(CveSignatureListing.sortByReversedDateUpdated);\n    }\n    return {\n      listing,\n      filesnames: files,\n      dirsTraversed: dirs\n    };\n\n  }\n\n}\n","import { Command } from 'commander';\n\nimport { GenericCommand } from '../GenericCommand.js';\nimport { CveSignatureListing } from '../../core/CveSignatureListing.js';\nimport { ListOptions, ListManager } from './ListManager.js';\nimport { IsoDateString } from '../../common/IsoDate/IsoDateString.js';\n\n/** Command to print out current date in various formats */\nexport class ListCommand extends GenericCommand {\n  constructor(program: Command) {\n    const name = 'list';\n    super(name, program);\n    this._program\n      .command(name)\n      .description('generate CVE Listings')\n      .option(\n        '--ignore-sha',\n        'ignore SHA256 when making or comparing listings'\n      )\n      .option(\n        '--make-from-dir <cves directory>',\n        'returns a listing of a local cves directory, defaults to ./cves',\n        'cves',\n    )\n      .option(\n        '--reverse-sort-by-date-updated',\n        'when making listings, sort by the CVEs dateUpdated'\n      )\n      .option(\n        '--start <ISO DateTime>',\n        'earliest dateUpdated to include'\n      )\n      .option(\n        '--stop <ISO DateTime>',\n        'latest dateUpdated to include'\n      )\n      // .option(\n      //   '--format',\n      //   'specify output format')\n      // .option(\n      //   '--sort',\n      //   'specify sort order (default is lexical)'\n      // )\n      // .option(\n      //   '--rsort',\n      //   'specify reversed sort order'\n      // )\n      .action(this.run);\n  }\n\n  async run(options) {\n    super.prerun({ ...options });\n    let listing: CveSignatureListing;\n    if (options.makeFromDir) {\n      console.log(`building listing from local dir, ${options.makeFromDir}... (this may take a few minutes)`);\n      const mgrOptions: ListOptions = {\n        sha256: !options.ignoreSha,\n        sortby_reversedDateUpdated: options.reverseSortByDateUpdated,\n        start: options.start ? new IsoDateString(options.start) : new IsoDateString(\"1970-01-01T00:00:00.000Z\"),\n        stop: options.stop ? new IsoDateString(options.stop) : new IsoDateString()\n      };\n      let retval = ListManager.fromDir(options.makeFromDir, mgrOptions);\n      listing = retval.listing;\n    }\n\n    console.log(JSON.stringify(listing, null, 2));\n    super.postrun(options);\n  }\n}","/**\n *  ActivityLog - log of activities\n *  Intent is to log everything that makes changes to the repository, so key information is stored from \n *  GitHub action to GitHub action (e.g., stopdate of last activity for re-running a command)\n */\n\nimport fs from 'fs';\nimport path from 'path';\n\nimport { Activity } from './Activity.js';\n\nexport interface ActivityLogOptions {\n  path?: string,\n  filename?: string,\n  // mode?: \"prepend\" | \"append\";\n  logCurrentActivity?: boolean;\n  logAlways?: boolean;\n  logKeepPrevious?: boolean;\n}\n\nexport class ActivityLog {\n\n  _options: ActivityLogOptions;\n  _fullpath: string;\n  _activities: Activity[] = [];\n\n  constructor(options: ActivityLogOptions) {\n    this._options = options;\n    this._options.path = options.path || `.`;\n    this._options.filename = options.filename || `./test/activities_recent.json`;\n    // this._options.mode = options.mode || `prepend`;\n    this._options.logAlways = options.logAlways || false;\n    this._options.logKeepPrevious = options.logKeepPrevious || false;\n    this._fullpath = `${this._options.path}/${this._options.filename}`;\n\n    // console.log(`ActivityLog constructor:  options=${JSON.stringify(this)}`)\n    // console.log(`options=`, this._options);\n    if (this._options.logKeepPrevious) {\n      this._activities = ActivityLog.readFile(this._fullpath);\n    }\n    else {\n      // fs.unlinkSync(this._fullpath);\n      this.clearActivities();\n    }\n\n  }\n\n\n  // clears the file\n  clearActivities(): void {\n    this._activities = [];\n  }\n\n\n\n  /**\n   * @returns the most recent activity object\n   */\n  getMostRecentActivity(): Activity {\n    return this._activities[0];\n  }\n\n\n  /**\n   * prepends activity to activities\n   * @param activity the activity object to prepend\n   * @returns the current list of activities, after prepending\n   */\n  prepend(activity: Activity): Activity[] {\n    // console.log(`options=`, this._options);\n    if (this._options.logAlways || activity?.steps.length > 0) {\n      this._activities.unshift(activity);\n    }\n    return this._activities;\n  }\n\n  // ----- IO ----- ----- ----- ----- ----- ----- ----- ----- ----- -----\n\n  /** writes activities to a file\n    * @return true iff the file was written\n    */\n  writeRecentFile(): boolean {\n    // console.log(`options=`, this._options);\n    if (this._options.logAlways || this._activities.length > 0) {\n      ActivityLog.writeFile(this._fullpath, JSON.stringify(this._activities, null, 2));\n      return true;\n    }\n    return false;\n  }\n\n\n\n  // ----- static functions ----- ----- ----- ----- ----- ----- ----- ----- ----- \n\n\n  /** reads in the recent activities into _activities */\n  static readFile(relFilepath: string): Activity[] {\n    let json = [];\n    if (fs.existsSync(relFilepath)) {\n      const str = fs.readFileSync(relFilepath, { encoding: 'utf8', flag: 'r' });\n      if (str.length > 0) {\n        json = JSON.parse(str);\n      }\n    }\n    return json;\n  }\n\n  /** writes to activity file */\n  static writeFile(relFilepath: string, body: string): void {\n    const dirname = path.dirname(relFilepath);\n    fs.mkdirSync(dirname, { recursive: true });\n    fs.writeFileSync(`${relFilepath}`, body);\n  }\n\n}","/**\n *  Activity object\n *  This is the activity object in an ActivityLog file\n */\nimport cloneDeep from 'lodash.clonedeep';\nimport isEqual from 'lodash.isequal';\n\nimport { CveDate } from './CveDate.js';\nimport { Delta } from '../core/Delta.js';\n\n\nexport interface ActivityError {\n  [key: string]: string;\n}\n\n\nexport interface ActivityNotes {\n  [key: string]: string;\n}\n\nexport enum ActivityStatus {\n  Unknown = \"unknown\",\n  NoStarted = \"not_started\",\n  InProgress = \"in_progress\",\n  Completed = \"completed\",\n  Failed = \"failed\"\n}\n\nexport interface ActivityProps {\n  // all dates and times are ISO format\n  startTime: string,\n  stopTime: string,\n  duration: string,\n  // type: `github` | `manual`,\n  name: string,\n  url?: string, // optional URL to github action, none for manual\n  status: ActivityStatus,\n  errors?: ActivityError[],\n  notes?: ActivityNotes;\n  delta?: Delta,\n  steps?: ActivityStep[];\n}\n\nexport interface ActivityStep {\n  stepDescription: string;\n  startTime: string;  // start of step\n  stopTime: string;   // end of step\n  duration: string;   // duration of step\n  summary: {\n    startWindow?: string;  // actual start window (used by getCvesInWindow, getCvesInFirstFrame)\n    endWindow?: string;    // actual end window (used by getCvesInWindow, getCvesInFirstFrame)\n    page?: number;         // page number (used by getCvesByPage)\n    count: number;         // number of CVE records\n    cveIds?: string[];     // CVE IDs involved with this particular iteration (startWindow to endWindow or page)\n    // Note that cveIds does not take into account if a previous frames returned\n    // the same set of CVE IDs, only that the current frame returned this set\n    // If you want to see the deltas, see ActivityAction, which shows overall new and updated CVEs\n    // regardless of which frame/operation it happened in\n  };\n}\n\nexport class Activity implements ActivityProps {\n\n  startTime: string = CveDate.toISOString();\n  stopTime: string = \"?\";\n  duration: string = \"?\";\n  // type: `github` | `manual`,\n  name: string = \"?\";\n  url?: string = \"?\"; // optional URL to github action, none for manual\n  status: ActivityStatus;\n  errors?: ActivityError[];\n  notes?: ActivityNotes;\n  delta?: Delta;\n  steps: ActivityStep[];\n\n  constructor(props: ActivityProps = null) {\n    // set defaults first\n\n    // update with props\n    if (props) {\n      this.startTime = props?.startTime;\n      this.stopTime = props?.stopTime;\n      this.duration = props?.duration;\n      this.name = props?.name;\n      this.url = props?.url;\n      this.status = props?.status;\n      this.errors = props?.errors ? cloneDeep(props.errors) : [];\n      this.notes = props?.notes ? cloneDeep(props.notes) : {};\n      this.delta = props?.delta ? cloneDeep(props.delta) : { newCves: [], updatedCves: [] };\n      this.steps = props?.steps ? cloneDeep(props.steps) : [];\n    }\n  }\n\n  equalTo(props: ActivityProps): boolean {\n    return isEqual(this, props);\n  }\n\n\n  // prepends a step to steps\n  prependStep(step: ActivityStep): ActivityStep[] {\n    if (step?.summary?.count > 0) {\n      this.steps.unshift(step);\n    }\n    return this.steps;\n  }\n\n}","/**\n * Updates /cves by dates using CveService\n */\n\nimport {\n  add,\n  differenceInSeconds,\n  parseISO\n} from 'date-fns';\n\nimport { Activity, ActivityStatus, ActivityStep } from '../../core/Activity.js';\nimport { ActivityLogOptions, ActivityLog } from '../../core/ActivityLog.js';\nimport { CveRecord } from '../../core/CveRecord.js';\n// import { CveService } from '../../net/CveService.js';\nimport { CveServiceCveReader } from '../../adapters/cveservice/CveServiceCveReader.js';\n// import { Delta } from '../core/Delta.js';\nimport { Git } from '../../core/git.js';\n\nexport const kActivity_UpdateByModificationDateWindow = 'UPDATE_BY_MODIFICATION_DATE_WINDOW';\nexport const kActivity_UpdateByPage = 'UPDATE_BY_PAGE';\nexport class CveUpdater {\n\n  static _recsPerPage: number = process.env.CVE_SERVICES_RECORDS_PER_PAGE ? parseInt(process.env.CVE_SERVICES_RECORDS_PER_PAGE) : 500;\n\n  /** repository base path */\n  _repository_base = `${process.env.CVES_BASE_DIRECTORY}`;\n  _release_note_path = `${this._repository_base}/release_notes.md`;\n  _recent_activities_path = `${this._repository_base}/${process.env.CVES_RECENT_ACTIVITIES_FILENAME}`;\n\n  _activityLog: ActivityLog;\n  _cveServiceReader: CveServiceCveReader;\n\n  constructor(activity: string, logOptions: ActivityLogOptions, cveServiceReader: CveServiceCveReader) {\n    // console.log(`CveUpdater(options=${JSON.stringify(logOptions)})`)\n    this._activityLog = new ActivityLog(logOptions);\n    this._cveServiceReader = cveServiceReader;\n  }\n\n  // ----- CVE updates -----\n\n  /** retrieves CVEs added or updated in a window of time \n   *  NOTE that if the number of records is > max, then the window is narrowed\n   *  until the number of records is <= max, and only this narrowed window (called a frame) of CVEs\n   *  is returned.  It is the responsibility of the caller to repeat\n   *  the call (with new startWindow set to previous endWindow) until\n   *  new startWindow is >= the original endWindow.  See tests for example.\n   * \n   *  @param startWindow requested start window, MUST BE ISO\n   *  @param endWindow requested end window, MUST BE ISO\n   *  @param max max records requested (default is 500)\n   *             if the number of records in [startWindow,endWindow] > max, then endWindow is shortened until \n   *             number of records < max\n   *  @param writeDir a path to write CVE JSON objects to (defaults to undefined, which will not persist any CVEs, useful when trying to query statistics about CVEs)\n   *  @returns an Activity with data and properties OR\n   *           null if params are detected to be a no-op\n   * \n   *  @todo NOTE that there is a known bug at present, where if there were > max records that were changed in less than 1 second\n   *  this will go into an endless loop.\n   *    Note that this has not happened in the last few weeks (hk on 4/5/23).  In the review, Thu suggested to add a sleep function, which I think may be \n   *    a good starting point to fix this problem\n  */\n  async getFirstCvesFrame(\n    startWindow: string,\n    endWindow: string,\n    max: number = CveUpdater._recsPerPage,\n    writeDir: string | undefined = undefined\n  ): Promise<ActivityStep | undefined> {\n    if (startWindow == endWindow) {\n      // no need to run\n      return undefined;\n    }\n    const timestampStart = Date.now();\n    const actualStartWindow = startWindow;\n    let actualEndWindow = endWindow;\n    // const service = new CveService();\n    let queryString = '';\n    let totalCount = 0;\n    let tries = 0;\n    let diff = 0;\n    const actualStartWindowIso = parseISO(actualStartWindow);\n    do {\n      queryString = `time_modified.gt=${actualStartWindow}&time_modified.lt=${actualEndWindow}`;\n      // const resp = await service.cve({ queryString: `count_only=1&${queryString}` });\n      const resp = await this._cveServiceReader.cveGetFiltered(`count_only=1&${queryString}`);\n      totalCount = parseInt(resp['totalCount']);\n      diff = differenceInSeconds(parseISO(actualEndWindow), actualStartWindowIso);\n      console.log(`try=${tries}:  currentCount=${totalCount} / ${max}  (diff=${diff}: [${actualStartWindow},${actualEndWindow}])`);\n      if (totalCount > max) {\n        actualEndWindow = add(actualStartWindowIso, { seconds: diff / 2 }).toISOString();\n      }\n      tries++;\n    } while (totalCount > max && diff > 0 && tries < 20);\n    // const cves = await service.cve({ queryString });\n    const cves = await this._cveServiceReader.cveGetFiltered(queryString);\n    const cveIds: string[] = [];\n    cves['cveRecords']?.forEach(record => {\n      cveIds.push(record.cveMetadata.cveId);\n    });\n\n    const startTime = new Date(timestampStart).toISOString();\n    const timestampEnd = Date.now();\n    const step = {\n      startTime,\n      stopTime: new Date(timestampEnd).toISOString(),\n      duration: `${timestampEnd - timestampStart} msecs`,\n      stepDescription: kActivity_UpdateByModificationDateWindow,\n      summary: {\n        startWindow: actualStartWindow,\n        endWindow: actualEndWindow,\n        count: cves['cveRecords']?.length,\n        cveIds,\n      }\n    };\n\n    // write file to repository\n    if (writeDir) {\n      cves['cveRecords']?.forEach(json => {\n        const cve = new CveRecord(json);\n        cve.writeToCvePath(writeDir);\n      });\n    }\n    return step;\n  }\n\n\n  /** retrieves the CVEs in a window of time \n   *  @param startWindow requested start window, MUST BE ISO\n   *  @param endWindow requested end window, MUST BE ISO\n   *  @param max max records requested\n   *             if the number of records in [startWindow,endWindow] > max, then endWindow is shortened until \n   *             number of records < max\n   *  @returns an Activity with data and properties OR\n   *           null if params are detected to be a no-op\n  */\n  async getCvesInWindow(\n    startWindow: string,\n    endWindow: string,\n    max: number = CveUpdater._recsPerPage,\n    writeDir: string | undefined = undefined\n  ): Promise<Activity> {\n    const timestampStart = Date.now();\n\n    // start an ActivityLog for the steps to be prepended into\n    const startTime = new Date(timestampStart).toISOString();\n    const activity: Activity = new Activity({\n      startTime,\n      stopTime: '',\n      duration: '',\n      name: `cves in window`,\n      // url: `tbd`,\n      status: ActivityStatus.Completed,\n      // errors: [{ \"tbd\": \"tbd\" }],\n      // notes: {\n      //   // \"function\": \"getCvesInWindow()\",\n      //   // \"params\": JSON.stringify({ startWindow, endWindow, max, writeDir }, null, 2)\n      // },\n      delta: undefined,\n      steps: []\n    });\n\n    // do window\n    let newStartWindow: string = startWindow;\n    const newEndWindow = endWindow;\n    let step: ActivityStep | undefined;\n    do {\n      step = await this.getFirstCvesFrame(newStartWindow, newEndWindow, max, `${process.env.CVES_BASE_DIRECTORY}`);\n      if (step) {\n        // count = activity.summary.count;\n        const stepEndWindow = step?.summary?.endWindow;\n        if (stepEndWindow) {\n          newStartWindow = stepEndWindow;\n        }\n        activity.prependStep(step);\n        // console.log(`getCvesInWindow.step.summary.count=${step.summary.count}`);\n      }\n    } while (step && newStartWindow < newEndWindow);\n\n\n    // add remainder of Activity properties\n    activity.delta = await Git.calculateDelta({}, `${this._repository_base}`);\n    // console.log(`activity after checking for delta:  ${JSON.stringify(activity, null, 2)}`);\n    const timestampEnd = Date.now();\n    activity.stopTime = new Date(timestampEnd).toISOString();\n    activity.duration = `${timestampEnd - timestampStart} msecs`;\n    return activity;\n  }\n\n\n  // ----- Recent Activities log -----\n\n\n  /** reads recent activities data */\n  readRecentActivities(): Activity[] {\n    return this._activityLog._activities;\n  }\n\n\n  /** write recent activities to file */\n  writeRecentActivities(): boolean {\n    return this._activityLog.writeRecentFile();\n  }\n\n}","/**\n *  DeltaLog - log of current and recent historical deltas\n *  Intent is to log all deltas from the current delta to recent historical deltas,\n *  so key information is stored, and other systems using deltas as polling integration points\n *  can poll at any frequency less than the period \n *  defined in `.env`'s `CVES_DEFAULT_DELTA_LOG_HISTORY_IN_DAYS` environment variable\n *  (30 days is current default)\n * \n *  The deltas in the DeltaLog is intended to provide just sufficient information\n *  to decide if a downstream app should be updated:\n *    1. CVEs that were added\n *    2. CVEs there were updated\n *    3. URLs to GitHub and CVE REST Services to retrieve full CVE details\n *    4. timestamp when the CVEs were committed to the repository\n */\n\nimport fs from 'fs';\nimport path from 'path';\n\nimport { Delta, DeltaOutpuItem } from './Delta.js';\nimport { IsoDateString } from '../common/IsoDate/IsoDateString.js';\nimport { CveCorePlus } from './CveCorePlus.js';\nimport { FsUtils } from './fsUtils.js';\n\nexport class DeltaLog extends Array<Delta>{\n\n  static kDeltaLogFilename = `deltaLog.json`;\n  static kDeltaLogFile = `cves/${DeltaLog.kDeltaLogFilename}`;\n\n  // ----- constructor and factory functions ----- ----- ----- ----- ----- ----- ----- ----- ----- \n\n  /** constructor */\n  constructor() {\n    super();\n    // this._fullpath = `${this._options.path}/${this._options.filename}`;\n  }\n\n  /** constructs a DeltaLog by reading in the deltaLog file \n   *  @param pruneOlderThan optional ISO date, any items older than that date will\n   *    not be included in the resulting DeltaLog\n   *  @param relFilepath optional path to the logfile (defaults to cves/deltaLog.json)\n   *  \n  */\n  static fromLogFile(\n    relFilepath?: string,\n    pruneOlderThan?: IsoDateString,\n  ): DeltaLog {\n    if (!pruneOlderThan) {\n      const days = process.env.CVES_DEFAULT_DELTA_LOG_HISTORY_IN_DAYS ?? \"30\";\n      pruneOlderThan = new IsoDateString().daysAgo(parseInt(days));\n      // console.log(`setting pruning date to ${pruneOlderThan}`);\n    }\n    if (!relFilepath) {\n      console.log(`setting logFile to ${DeltaLog.kDeltaLogFile}`);\n      relFilepath = DeltaLog.kDeltaLogFile;\n    }\n    const pruneOlderThanTicks = pruneOlderThan.toNumber()\n    let json = [];\n    if (fs.existsSync(relFilepath)) {\n      const str = fs.readFileSync(relFilepath, { encoding: 'utf8', flag: 'r' });\n      if (str.length > 0) {\n        json = JSON.parse(str);\n      }\n    }\n    let log = new DeltaLog();\n    json.forEach(ele => {\n      const fetchTime = new IsoDateString(ele['fetchTime']);\n      if (fetchTime.toNumber() >= pruneOlderThanTicks) {\n        log.push(new Delta(ele));\n      }\n    });\n\n    return log;\n  }\n\n\n  // ----- class functions ----- ----- ----- ----- ----- ----- ----- ----- ----- \n\n  /** prunes and returns a NEW delta log with specified start and stop fetchTimes\n   *  \n   */\n  static pruneByFetchTime(\n    origLog: DeltaLog,\n    startDate: IsoDateString | string,\n    stopDate: IsoDateString | string = null\n  ) {\n    const log = new DeltaLog();\n    const start = (startDate instanceof IsoDateString) ? startDate.toNumber() : new IsoDateString(startDate).toNumber();\n    if (!stopDate) {\n      stopDate = new IsoDateString();\n    }\n    const stop = (stopDate instanceof IsoDateString) ? stopDate.toNumber() : new IsoDateString(stopDate).toNumber();\n    origLog.forEach(ele => {\n      const fetchTime = new IsoDateString(ele['fetchTime']).toNumber();\n      if (fetchTime >= start && fetchTime <= stop) {\n        log.push(new Delta(ele));\n      }\n    });\n    return log;\n  }\n\n\n  // ----- member functions ----- ----- ----- ----- ----- ----- ----- ----- ----- \n\n  /**\n   * prepends a delta to log\n   * @param delta the Delta object to prepend\n   */\n  prepend(delta: Delta): void {\n    this.unshift(delta);\n  }\n\n  /** sorts the Deltas in place by the `fetchTime` property\n   *  @param direction: one of \n   *            - \"latestFirst\" - reverse chronological order (default)\n   *            - \"latestLast\" - chronological order\n  */\n  sortByFetchTme(direction: \"latestFirst\" | \"latestLast\" = \"latestFirst\"): DeltaLog {\n    return this.sort((a, b) => {\n      const d1 = a.fetchTime ? new Date(a.fetchTime) : new Date();\n      const d2 = b.fetchTime ? new Date(b.fetchTime) : new Date();\n      if (direction === 'latestFirst') {\n        return d2.getTime() - d1.getTime();\n      }\n      else {\n        return d1.getTime() - d2.getTime();\n      }\n    });\n  }\n\n  /**\n   * Creates a single Delta object that contains all of the CVEs in each queue as if\n   * all the operations within the time window had happened as a single event\n   * Note that if a CVE was published and then subsequently updated, that CVE\n   *  will show up in both the new and updated queues.  If you want all CVEs\n   *  from both new and updated queues, run getAllUniqueNewAndUpdatedCves() on the returned Delta object\n   * \n   * @param startWindow IsoDateString for start of time window\n   * @param stopWindow  optional IsoDateString for stop of time window\n   * @returns a single Delta object with all of the consolidated data from all the Deltas in the time window\n   */\n  consolidateDeltas(startWindow: IsoDateString, stopWindow?: IsoDateString): Delta {\n    if (!stopWindow) {\n      stopWindow = new IsoDateString();\n    }\n    const sorted = this.sortByFetchTme();\n    const windowed: Delta[] = sorted.filter(delta => (delta.fetchTime > startWindow.toString() && (delta.fetchTime < stopWindow.toString())));\n    // using object insteads of Set because set won't differientiate objects\n    let newList: Record<string, CveCorePlus> = {};\n    let updatedList: Record<string, CveCorePlus> = {};\n    windowed.forEach(delta => {\n      delta.new.forEach(item => {\n        newList[item.cveId.toString()] = item;\n      });\n      delta.updated.forEach(item => {\n        updatedList[item.cveId.toString()] = item;\n      });\n    });\n    // cast lists to a Delta object\n    let retval = new Delta();\n    Object.entries(newList).map((tuple) => retval.new.push(tuple[1]));\n    Object.entries(updatedList).map((tuple) => retval.updated.push(tuple[1]));\n    retval.calculateNumDelta();\n    retval.fetchTime = stopWindow.toString();\n    return retval;\n  }\n\n  // ----- IO ----- ----- ----- ----- ----- ----- ----- ----- ----- -----\n\n  /** writes deltas to a file\n   *  @param relFilepath optional relative or full filepath\n   *  @returns true iff the file was written (which only happens when \n   *    there the [0] delta has changes)\n    */\n  writeFile(relFilepath?: string): boolean {\n    if (this.length === 0 || this[0].numberOfChanges === 0) {\n      return false;\n    }\n    else {\n      if (!relFilepath) {\n        relFilepath = DeltaLog.kDeltaLogFile;\n      }\n      const dirname = path.dirname(relFilepath);\n      fs.mkdirSync(dirname, { recursive: true });\n      fs.writeFileSync(`${relFilepath}`, JSON.stringify(this, DeltaOutpuItem.replacer, 2));\n      return true;\n    }\n  }\n\n  static fitDeltaLogToFileSize(relFilePath: string, fileSizeLimitBytes: number) {\n    let initalFileSize = fs.statSync(relFilePath).size;\n    if (initalFileSize < fileSizeLimitBytes) {\n      return false;\n    }\n    let delta = DeltaLog.fromLogFile(relFilePath);\n    delta.sortByFetchTme('latestFirst');\n    let numDeltas = delta.length;\n    let maxCondenseLevel = 3;\n    let cutDeltas = [];\n\n    while (delta.length > 0) {\n      let condenseLevel = 0;\n      while (condenseLevel <= maxCondenseLevel) {\n        let currSize = FsUtils.condenseJsonDataFile(condenseLevel, relFilePath);\n        if (currSize <= fileSizeLimitBytes) {\n          console.log(`DeltaLog file was previously ${initalFileSize} bytes, and is now ${currSize} bytes (${initalFileSize - currSize} byte diff ${Math.floor(100 * (currSize / initalFileSize))}%). DeltaLog file was condensed by cutting off the last ${numDeltas - delta.length} delta blocks, and condensing to level ${condenseLevel}.`);\n          console.log(\"Removed:\", JSON.stringify(cutDeltas, null, 2));\n          return true;\n        }\n        ++condenseLevel;\n      }\n      // condensing is insufficent. need to remove deltas from records.\n      cutDeltas.push(delta.pop());\n      delta.writeFile(relFilePath);\n    }\n\n    // getting here means that there is only one delta in the log, and that one is too large.\n    // In theory this will never be thrown as the only way for this to happen is if\n    // the latest condensed delta block wrapped in an array itself is too large.\n    // otherwise the delta file itself is too large and should have been handled by the Delta class.\n    throw new Error(\"Single delta file content is too large!\");\n  }\n\n\n\n}","/**\r\n * Keeps track of a credential set.\r\n */\r\nexport class CveServiceCredSet {\r\n    private org: string;\r\n    private user: string;\r\n    private key: string;\r\n    constructor(org: string, user: string, key: string) {\r\n        if (!!!org || !!!user || !!!key) {\r\n            // if there is ever a valid case where not all of these are required, \r\n            // then you may change this function to refelct that. \r\n            // Requiring all values to exist will allow dowwnstream code to catch missing values.\r\n            throw new Error('Org, User, and Key are all required at initialization time, not just compile time.');\r\n        }\r\n        this.org = org;\r\n        this.user = user;\r\n        this.key = key;\r\n    }\r\n\r\n    /* \r\n     * @returns Formatted dict of headers for an api request.\r\n     */\r\n    getAsHeader() {\r\n        return {\r\n            \"Content-Type\": \"application/json\",\r\n            \"CVE-API-ORG\": this.org,\r\n            \"CVE-API-USER\": this.user,\r\n            \"CVE-API-KEY\": this.key,\r\n            \"redirect\": \"follow\"\r\n        };\r\n    }\r\n}","/**\r\n * holds credentials and an endpoint for CveServices\r\n * Note that the location of the CVE Services API, username, password, tokens, etc.\r\n *   should only be stored in the project's .env file, which must be defined before running\r\n */\r\n// usage of cve-services almost always guarantees the need for .env vars, so load it here\r\nimport * as dotenv from 'dotenv';\r\ndotenv.config();\r\n\r\nimport { CveServiceCredSet } from './CveServiceCredSet.js';\r\nimport { CveServiceBaseUrl } from './CveServiceBaseUrl.js';\r\n\r\n/**\r\n * Keeps track of creds to use for some arbitrary Cve Services endpoint.\r\n */\r\nexport abstract class CveService {\r\n    endpoint: CveServiceBaseUrl;\r\n    protected credset: CveServiceCredSet;\r\n    constructor(url: CveServiceBaseUrl, credset: CveServiceCredSet) {\r\n        this.endpoint = url;\r\n        this.credset = credset;\r\n    }\r\n\r\n}","/** Class that holds information regarding a Cve Services endpoint. */\r\nexport class CveServiceBaseUrl {\r\n    hostdomain: string;\r\n    rootpath: string;\r\n    /**\r\n     * \r\n     * @param url The host domain url (e.g. 'http://localhost:3000' or 'https://cveawg.mitre.org')\r\n     * @param rootpath [Optional] the root path for this url (e.g. '/api/cve', '/api/health-check')\r\n     */\r\n    constructor(url: string, rootpath?: string) {\r\n        // we do not clean url & rootpath. assume valid.\r\n        this.hostdomain = url;\r\n        this.rootpath = rootpath;\r\n    }\r\n    /**\r\n     * We dont want the host url to ever change after being initialized, so enforce encapsulation.\r\n     * @returns the host url (full domain)\r\n     */\r\n    getUrl(): string {\r\n        return this.hostdomain + (this.rootpath ?? '');\r\n    }\r\n\r\n    /**\r\n     * justification for this function is to allow development to ensure they never hit the prod host during development.\r\n     */\r\n    isProd(): boolean {\r\n        // @note: subject to change.\r\n        const KNOWN_CVEAWG_PROD_DOMAIN_REGEX = /^(https?:\\/\\/)?\\bcveawg\\.mitre\\.org\\/?/gmi;\r\n        return !!this.getUrl().match(KNOWN_CVEAWG_PROD_DOMAIN_REGEX);\r\n    }\r\n}","import { CveService } from './CveService.js';\nimport { CveServiceCredSet } from './CveServiceCredSet.js';\nimport { CveServiceBaseUrl } from './CveServiceBaseUrl.js';\nimport { CveRecord } from '../../core/CveRecord.js';\nimport { CveId, CveIdError } from '../../core/CveId.js';\ntype CveServiceGETCveRawEndpointReturnSchema = {\n  totalCount: number,\n  itemsPerPage: number,\n  pageCount: number,\n  currentPage: number;\n  prevPage: number;\n  nextPage: number;\n  cveRecords: CveRecord[] | CveRecordV5[] | any;\n};\ntype CveServicesGETCveWithIdArgEndpointReturnSchema = CveRecordV5;\ntype CveServicesGETErrorEndpointReturnSchema = { message: string, error: string; };\n\n// fetch-retry can also wrap Node.js's native fetch API implementation:\nimport fetchBuilder from 'fetch-retry';\nimport { CveRecordV5 } from '../../generated/quicktools/CveRecordV5.js';\nconst fetchRetry = fetchBuilder(global.fetch);\n\n/**\n * Main class that provides functional READ access to the /cve Services API\n * Note that the url of the CVE Services API, username, password, tokens, etc., all need to be \n *    set in the project's .env file.\n * \n * @DEV: This class requires that ALL outbound read requests be routed through the protected `getCve` function!\n */\nexport class CveServiceCveReader extends CveService {\n  /** This is only publicly accessable so that proper testing can be done. */\n  readonly _fetchRetry = fetchRetry;\n  protected MAX_READ_RETRY = parseInt(process.env.CVE_SERVICES_GET_MAX_RETRY);\n\n  constructor(host: string, credSet: CveServiceCredSet) {\n    const endpoint = new CveServiceBaseUrl(host, '/api/cve');\n    super(endpoint, credSet);\n  }\n\n  async getAllCvesChangedInTimeFrame(start: string, stop: string): Promise<CveRecord[]> {\n    const queryString = `time_modified.gt=${start}&time_modified.lt=${stop}`;\n    const response = await this.cveGetFiltered(queryString);\n    if (response) {\n      return response['cveRecords'].map(obj => new CveRecord(obj)) ?? [];\n    }\n    console.warn(`Cve Services reurned unexpected data from cveGetFiltered(\\`${queryString}\\`)`, response);\n    return [];\n  };\n\n  /** async method that returns some information about the the CVE Services API\n   * Note:  Avoid using this since it is expensive and can run as long as 15 seconds\n   * @return an object with information about the CVE Services API\n   */\n  // @note i want to get rid of this func if possible\n  async getCveSummary(): Promise<{ totalCves: number, totalCvePages: number, cvesPerPage: number; }> {\n    // to get the total count, page count, and cves per page we read well past the actual\n    // number of CVEs so that we get all of the expected info but no cve data is passed\n    // in the cveRecords field of the response.\n    // In theory, this should allow for the fastest way to retreive this information.\n    // alternative might be to figure out how the cve-services is configured.\n    // A potential solution might be to read the actual config data:\n    // https://github.com/CVEProject/cve-services/blob/89aac9d8b038bed8f53036ace9a286686b84d301/src/constants/index.js#L82\n    // which would accurately reflect the prod version of cve-services, but it would not\n    // guarantee that the non prod instances are configured the same way.\n    const response = await this.cveGetFiltered(`page=1000`);\n    return {\n      totalCves: response['totalCount'],\n      totalCvePages: response['pageCount'],\n      cvesPerPage: response['itemsPerPage']\n    };\n  }\n\n  /** async method that returns the CVE Record associated with a given CVE id\n   * @param id the CVE id string to retrieve\n   * @return a CveRecord representing the record associated with a given CVE id\n   */\n  async getCveUsingId(id: string): Promise<CveRecord> {\n    if (CveId.isValidCveId(id)) {\n      return await this.cveGetSingle(id);\n    }\n    else {\n      throw new CveIdError(`Invalid CVE ID: ${id}`);\n    }\n  }\n\n\n  /**\n   * Wrapper for `/cve`\n   * @param queryString query string corresponding to any of the query parameters allowed by the /cve endpoint (e.g., page=5)\n   * @throws Error if failure to retreive records for any reason!\n   */\n  async cveGetFiltered(queryString?: string): Promise<CveServiceGETCveRawEndpointReturnSchema | CveServicesGETErrorEndpointReturnSchema> {\n    let data = await this.getCve({ queryString }) as CveServiceGETCveRawEndpointReturnSchema | CveServicesGETErrorEndpointReturnSchema;\n    try {\n      if ('cveRecords' in data) {\n        data['cveRecords'] = data['cveRecords'].map(e => new CveRecord(e));\n      }\n    } catch (err) {\n      console.debug(`Failed to parse cve record response data from query (${queryString})`);\n      console.error(err);\n      throw err;\n    }\n    return data;\n  }\n\n  /**\n   * Wrapper for `/cve/{id}`\n   * @param id \n   * @returns the resulting CveRecord\n   * @throws Error if failure to retreive record for any reason!\n   */\n  async cveGetSingle(id?: string): Promise<CveRecord> {\n    // we dont validate cve id here, we assume it is correct. \n    // we expect upstream to validate CVE ID.\n    // we expect if CVE ID DNE in cve services to return as an error message\n    let response = await this.getCve({ id });\n    let record = new CveRecord(response);\n    if (record.cveId != id) {\n      console.error(`Error while attempting to get content from single cve record!`, response);\n      throw new Error(`Failed to retreive CVE ID!`);\n    }\n    return record;\n  }\n\n  /**\n   * Wrapper for /cve\n   * @param id optional ID if we are getting single cve record\n   * @param queryString query string corresponding to any of the query parameters allowed by the /cve endpoint (e.g., page=5)\n   * @param failFast true if it should not use retry.\n   * @returns parsed json of result, or the error if any occured\n  */\n  protected async getCve(opts: { id?: string, queryString?: string; failFast?: boolean; }): Promise<CveServiceGETCveRawEndpointReturnSchema | CveServicesGETCveWithIdArgEndpointReturnSchema | CveServicesGETErrorEndpointReturnSchema | Error> {\n    let url = this.endpoint.getUrl();\n    if (opts.id) {\n      url += `/${opts.id}`;\n    }\n    if (opts.queryString) {\n      // remove initial ? if present\n      url += `?${opts.queryString.match(/\\??(.*)/)[1]}`;\n    }\n    let data = null;\n    // console.trace(`GET: ${url}`);\n    let response;\n    try {\n      response = await this._fetchRetry(\n        url,\n        {\n          method: 'GET',\n          headers: this.credset.getAsHeader(),\n          retryOn: (attempt, error, response): boolean => {\n            // retry on 429 rate limited or 5xx status codes and not over the limit\n            if (attempt > this.MAX_READ_RETRY) {\n              return false;\n            }\n            if (error !== null || response.status == 429 || response.status >= 500) {\n              console.log(`RETRY: (${url}) # ${attempt} --> ${error.message}`);\n              return true;\n            }\n            return false && !opts.failFast;\n          },\n          retryDelay: (attempt, error, response): number => {\n            // assume either rate limited or arbitrary 5xx error. \n            if (response.status == 429) {\n              // Wait for the start of the next minute.\n              let now = new Date();\n              now.setMinutes(now.getMinutes() + 1, 0, 100);\n              const timeToWait = now.getTime() - new Date().getTime();\n              return timeToWait;\n            } else {\n              // exponential backoff\n              return 2 ** attempt * 10 * 1000;\n            }\n\n          }\n        });\n    } catch (err) {\n      console.trace(`GET FAILED: ${url}`);\n      console.error(err);\n      return err;\n    }\n    try {\n      data = await response?.text();\n      data = JSON.parse(data);\n    } catch (e) {\n      console.error(`Error parsing fetch data!`, e, data);\n      return e;\n    }\n    return data;\n  }\n}","import sub from 'date-fns/sub';       // date and time subtraction\nimport { Command } from 'commander';\n\nimport { ActivityLog } from '../../core/ActivityLog.js';\nimport { CveDate } from '../../core/CveDate.js';\n// import { CveService } from '../net/CveService.js';\nimport { CveUpdater } from './CveUpdater.js';\nimport { Delta } from '../../core/Delta.js';\nimport { GenericCommand } from './../GenericCommand.js';\nimport { Git } from '../../core/git.js';\nimport { DeltaLog } from '../../core/DeltaLog.js';\nimport { DeltaFs } from '../../core/DeltaFs.js';\nimport fs from 'fs';\nimport { CveServiceCredSet } from '../../adapters/cveservice/CveServiceCredSet.js';\nimport { CveServiceCveReader } from '../../adapters/cveservice/CveServiceCveReader.js';\n/** Command to update local repository using CVE REST API */\nexport class UpdateCommand extends GenericCommand {\n\n  /** default number of minutes to look back when a start date is not specified */\n  static defaultMins = parseInt(process.env.CVES_DEFAULT_UPDATE_LOOKBACK_IN_MINS || \"180\");\n\n  /** Max file size is used to prevent git commit errors. Currently restricted to 100MB. **/\n  static readonly MAX_FILE_SIZE = (parseInt(process.env.GIT_MAX_FILESIZE_MB) ?? 100) * 1024 * 1024;\n\n  constructor(program: Command) {\n    const name = 'update';\n    super(name, program);\n    const now = new Date();\n    this._program\n      .command(name)\n      .description('update CVEs using CVE Services')\n      // .option('--logfile <string>', 'activies log filename', `${process.env.CVES_RECENT_ACTIVITIES_FILENAME}`)\n      .option(\n        '--minutes-ago <number>',\n        `start window at <number> of minutes ago (default behavior is past ${UpdateCommand.defaultMins} mins)`,\n        `${UpdateCommand.defaultMins}`,\n    )\n      .option(\n        '--start <ISO string>',\n        `specific start window, overrides any specifications from --minutes-ago`,\n      )\n      .option(\n        '--stop <ISO string>',\n        'stop window, defaults to now',\n        now.toISOString(),\n    )\n      .action(this.run);\n    this.timerReset();\n  }\n\n  /** determines the time options (start, stop, minutesAgo) behavior */\n  static determineQueryTimeOptions(options, now: string) {\n    const newOptions = { ...options };\n    const minutesAgo = parseInt(newOptions[`minutesAgo`]);\n    if (options.start) {\n      console.log(`ignoring minutes-ago (${newOptions.minutesAgo}), starting window is set to ${newOptions.start}`);\n    }\n    else {\n      newOptions.start = sub(new Date(now), { minutes: minutesAgo }).toISOString();\n      console.log(`starting window calculated from default --minutes-ago (${minutesAgo}): ${newOptions.start}`);\n    }\n    return newOptions;\n  }\n\n  /** runs the command using user set or default/calculated options */\n  async run(options) {\n    super.prerun(options);\n    super.timerReset();\n\n    // use default cred set to query Cve Services if none are given via options\n    const cveServiceCredSet = options.credSet ?? new CveServiceCredSet(\n      process.env.CVE_API_ORG as string,\n      process.env.CVE_API_USER as string,\n      process.env.CVE_API_KEY as string);\n    // use default cve services url\n    const cveServiceHost = options.cveServicesHost ?? process.env.CVE_SERVICES_URL as string;\n\n    //const cveService = new CveService();\n    const cveService = new CveServiceCveReader(cveServiceHost, cveServiceCredSet);\n\n    const updater = new CveUpdater(`update command`, {\n      path: options.output,\n      filename: options.logfile,\n      logAlways: options.logAlways,\n      logKeepPrevious: true\n    }, cveService);\n\n    // determine setup window from params\n    const newOptions = UpdateCommand.determineQueryTimeOptions(options, CveDate.toISOString());\n    const activityLog = new ActivityLog({\n      path: options.output,\n      filename: options.logfile,\n      logAlways: options.logAlways,\n      logKeepPrevious: true\n    });\n\n    // update by window\n    const args = process.argv;\n    // const countResp = await cveService.cve({ queryString: `count_only=1` });\n    // const countResp = await cveService.cve({ queryString: `count_only=1&time_modified.gt=${newOptions.start}&time_modified.lt=${newOptions.stop}` });\n    const queryString = `count_only=1&time_modified.gt=${newOptions.start}&time_modified.lt=${newOptions.stop}`;\n    const countResp = await cveService.cveGetFiltered(queryString);\n    console.log(`count=${countResp['totalCount']}`);\n    if (countResp['totalCount'] > 0) {\n      const activity = await updater.getCvesInWindow(newOptions.start, newOptions.stop);\n      console.log(`activity=`, JSON.stringify(activity, null, 2));\n\n      // log deltas and commit to git, if there are changes\n      if (activity?.delta?.numberOfChanges > 0) {\n\n        // write delta\n        let currentDelta = new DeltaFs(activity.delta);\n        currentDelta.hydrate()\n        currentDelta.fetchTime = activity.startTime;\n        // currentDelta.durationInMsecs = parseInt(activity.duration.split(' ')[0]);\n        currentDelta.writeFile();\n\n        // copy CVEs to delta directory\n        currentDelta.writeCves();\n\n        // write deltaLog\n        const deltaLog = DeltaLog.fromLogFile();\n        // console.log(`deltaLog.length=${deltaLog.length}`)\n        deltaLog.prepend(currentDelta);\n        // console.log(`deltaLog.length=${deltaLog.length}`)\n        deltaLog.writeFile();\n\n        // validate no file size issues\n        // for practical reasons we only validate the DeltaLog file for now.\n        // 100MB default, if no git env variable or zero it will not condense at all.\n        if (UpdateCommand.MAX_FILE_SIZE) {\n          DeltaLog.fitDeltaLogToFileSize(DeltaLog.kDeltaLogFile, UpdateCommand.MAX_FILE_SIZE);\n        }\n\n\n        // git add/commit\n        const localDir = `${process.cwd()}/${process.env.CVES_BASE_DIRECTORY}`;\n        const git = new Git({ localDir: `${process.cwd()}` });\n        let ret;//: Response<string>\n        ret = await git.add(`${localDir}`);\n        console.log(`git add repository files completed`);\n        ret = await git.commit(`${activity.delta.toText()}`);\n        console.log(`git commit returned ${JSON.stringify(ret, null, 2)}`);\n      }\n      else {\n        console.log(`no new or updated CVEs`);\n      }\n    }\n    else {\n      console.log(`no new or updated CVEs`);\n    }\n    console.log(`operation completed in ${super.timerSinceStart() / 1000} seconds at ${CveDate.toISOString()}`);\n    super.postrun(newOptions);\n  }\n}","/** object that encapsulates all tested and available cli commands */\n\nimport { Command } from 'commander';\n\nimport { DateCommand } from './DateCommand.js';\nimport { DeltaCommand } from './DeltaCommand.js';\nimport { GenericCommand } from './GenericCommand.js';\nimport { ListCommand } from './list/ListCommand.js';\nimport { UpdateCommand } from './updateCvesDir/UpdateCommand.js';\n\nexport class MainCommands {\n\n  protected _program;\n\n  constructor() {\n    this._program = new Command()\n      .version(GenericCommand.getUtilityVersion(), '-v, --version', 'version')\n      .name(`cves`)\n      .description(`CLI utility for working with CVEs`);\n\n    const dateCommand = new DateCommand(this._program);\n    const deltaCommand = new DeltaCommand(this._program);\n    const listCommand = new ListCommand(this._program);\n    const updateCommand = new UpdateCommand(this._program);\n  }\n\n  async run() {\n    await this._program.parseAsync(process.argv);\n  }\n\n}","\n// set up environment\nimport * as dotenv from 'dotenv';\ndotenv.config();\n\n// ----- github version of main.ts -----\nimport { MainCommands } from './commands/MainCommands.js';\nconst program = new MainCommands();\n// ----- github version of main.ts -----\n\n(async () => {\n  await program.run();\n})();\n"],"names":[],"sourceRoot":""}